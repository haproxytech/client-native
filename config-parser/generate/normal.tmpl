{{- if .ModeOther}}
package {{ .Dir }}
{{- else }}
package parsers
{{- end }}

import (
	"github.com/haproxytech/client-native/v5/config-parser/common"
	"github.com/haproxytech/client-native/v5/config-parser/errors"
	"github.com/haproxytech/client-native/v5/config-parser/{{ .DataDir }}types"
)

{{- if not .NoInit }}

func (p *{{ .StructName }}) Init() {
{{- if .ParserMultiple }}
	p.data = []types.{{ .ParserType }}{}
{{- else }}
    p.data = nil
{{- end }}
    p.preComments = []string{}
}
{{- end }}

{{- if not .NoName }}

func (p *{{ .StructName }}) GetParserName() string {
{{- if .HasAlias}}
    if p.Alias != "" {
	    return p.Alias
	}
{{- end }}
{{- if .ModeOther}}
    return p.Name
{{- else }}
{{- if eq .ParserSecondName "" }}
	return "{{ .ParserName }}"
{{- else }}
	return "{{ .ParserName }} {{ .ParserSecondName }}"
{{- end }}
{{- end }}
}
{{- end }}

{{- if not .NoGet }}

func (p *{{ .StructName }}) Get(createIfNotExist bool) (common.ParserData, error) {
{{- if .ParserMultiple }}
	if len(p.data) == 0 && !createIfNotExist {
		return nil, errors.ErrFetch
	}
{{- else }}
	if p.data == nil {
		if createIfNotExist {
			p.data = &types.{{ .ParserType }}{}
			return p.data, nil
		}
		return nil, errors.ErrFetch
	}
{{- end }}
	return p.data, nil
}
{{- end }}

func (p *{{ .StructName }}) GetPreComments() ([]string, error) {
	return p.preComments, nil
}

func (p *{{ .StructName }}) SetPreComments(preComments []string)  {
	p.preComments = preComments
}

func (p *{{ .StructName }}) GetOne(index int) (common.ParserData, error) {
{{- if .ParserMultiple }}
	if index < 0 || index >= len(p.data) {
		return nil, errors.ErrFetch
	}
	return p.data[index], nil
{{- else }}
	if index > 0 {
		return nil, errors.ErrFetch
	}
	if p.data == nil {
		return nil, errors.ErrFetch
	}
	return p.data, nil
{{- end }}
}

func (p *{{ .StructName }}) Delete(index int) error {
{{- if .ParserMultiple }}
	if index < 0 || index >= len(p.data) {
		return errors.ErrFetch
	}
	copy(p.data[index:], p.data[index+1:])
{{- if .IsInterface }}
	p.data[len(p.data)-1] = nil
{{- else }}
	p.data[len(p.data)-1] = types.{{ .ParserType }}{}
{{- end }}
	p.data = p.data[:len(p.data)-1]
	return nil
{{- else }}
	p.Init()
	return nil
{{- end }}
}

func (p *{{ .StructName }}) Insert(data common.ParserData, index int) error {
{{- if .ParserMultiple }}
	if data == nil {
		return errors.ErrInvalidData
	}
	switch newValue := data.(type) {
	case []types.{{ .ParserType }}:
		p.data = newValue
	case *types.{{ .ParserType }}:
		if index > -1 {
			if index > len(p.data) {
				return errors.ErrIndexOutOfRange
			}
{{- if .IsInterface }}
			p.data = append(p.data, nil)
{{- else }}
			p.data = append(p.data, types.{{ .ParserType }}{})
{{- end }}
			copy(p.data[index+1:], p.data[index:])
			p.data[index] = *newValue
		} else {
			p.data = append(p.data, *newValue)
		}
	case types.{{ .ParserType }}:
		if index > -1 {
			if index > len(p.data) {
				return errors.ErrIndexOutOfRange
			}
{{- if .IsInterface }}
			p.data = append(p.data, nil)
{{- else }}
			p.data = append(p.data, types.{{ .ParserType }}{})
{{- end }}
			copy(p.data[index+1:], p.data[index:])
			p.data[index] = newValue
		} else {
			p.data = append(p.data, newValue)
		}
	default:
		return errors.ErrInvalidData
	}
	return nil
{{- else }}
	return p.Set(data, index)
{{- end }}
}

func (p *{{ .StructName }}) Set(data common.ParserData, index int) error {
	if data == nil {
		p.Init()
		return nil
	}
{{- if .ParserMultiple }}
	switch newValue := data.(type) {
	case []types.{{ .ParserType }}:
		p.data = newValue
	case *types.{{ .ParserType }}:
		if index > -1 && index < len(p.data) {
			p.data[index] = *newValue
		} else if index == -1 {
			p.data = append(p.data, *newValue)
		} else {
			return errors.ErrIndexOutOfRange
		}
	case types.{{ .ParserType }}:
		if index > -1 && index < len(p.data) {
			p.data[index] = newValue
		} else if index == -1 {
			p.data = append(p.data, newValue)
		} else {
			return errors.ErrIndexOutOfRange
		}
	default:
		return errors.ErrInvalidData
	}
{{- else }}
	switch newValue := data.(type) {
	case *types.{{ .ParserType }}:
		p.data = newValue
	case types.{{ .ParserType }}:
		p.data = &newValue
	default:
		return errors.ErrInvalidData
	}
{{- end }}
	return nil
}

func (p *{{ .StructName }}) PreParse(line string, parts []string, preComments []string, comment string) (string, error) {
	changeState, err := p.Parse(line, parts, comment)
	if err == nil && preComments != nil {
		p.preComments = append(p.preComments, preComments...)
	}
	return changeState, err
}

{{- if and .ParserMultiple (not .NoParse) }}

func (p *{{ .StructName }}) Parse(line string, parts []string, comment string) (string, error) {
{{- if eq .ParserSecondName "" }}
	if parts[0] == "{{ .ParserName }}" {
{{- else }}
	if len(parts) > 1 && parts[0] == "{{ .ParserName }}"  && parts[1] == "{{ .ParserSecondName }}" {
{{- end }}
		data, err := p.parse(line, parts, comment)
		if err != nil {
			if _, ok := err.(*errors.ParseError); ok {
				return "", err
			}
			return "", &errors.ParseError{Parser: "{{ .StructName }}", Line: line}
		}
		p.data = append(p.data, *data)
		return "", nil
	}
	return "", &errors.ParseError{Parser: "{{ .StructName }}", Line: line}
}
{{- end }}

func (p *{{ .StructName }}) ResultAll() ([]common.ReturnResultLine, []string, error) {
	res, err := p.Result()
	return res, p.preComments, err
}
