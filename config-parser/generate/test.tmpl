package tests

import (
	"fmt"
	"strings"
	"testing"

	"github.com/haproxytech/client-native/v6/config-parser/{{ .DataDir }}parsers{{- if .ModeOther}}/{{ .Dir }}{{- end }}"
)
{{ $StructName := .StructName }}
func Test{{ $StructName }}{{ .Dir }}(t *testing.T) {
	tests := map[string]bool{
	{{- range $index, $val := .TestOKDefaults}}
		`{{- $val -}}`: true,
	{{- end }}
	{{- range $index, $val := .TestOKFrontend}}
		`{{- $val -}}`: true,
	{{- end }}
	{{- range $index, $val := .TestOKBackend}}
		`{{- $val -}}`: true,
	{{- end }}
	{{- range $index, $val := .TestOK}}
		"{{- $val -}}": true,
	{{- end }}
	{{- range $index, $val := .TestOKEscaped}}
		`{{- $val -}}`: true,
	{{- end }}
	{{- range $index, $val := .TestFail}}
		"{{- $val -}}": false,
	{{- end }}
	{{- range $index, $val := .TestFailEscaped}}
		`{{- $val -}}`: false,
	{{- end }}
	}
	{{- if .HasTable}}
	    testsTable := map[string]string{
	    {{- range $index, $val := .TestTableOK}}
            `{{- $val.Test -}}`: `{{- $val.Table -}}`,
        {{- end }}
        }
	{{- end}}
	parser := {{- if .ModeOther}} &{{ .Dir }}{{- else }} &parsers{{- end }}.{{ $StructName }}{}
	for command, shouldPass := range tests {
		t.Run(command, func(t *testing.T) {
		line :=strings.TrimSpace(command)
		lines := strings.SplitN(line,"\n", -1)
		var err error
		parser.Init()
		if len(lines)> 1{
			for _,line = range(lines){
			  line = strings.TrimSpace(line)
				if err=ProcessLine(line, parser);err!=nil{
					break
				}
			}
		}else{
			err = ProcessLine(line, parser)
		}
			if shouldPass {
				if err != nil {
					t.Error(err)
					return
				}
				result, err := parser.Result()
				if err != nil {
					t.Error(err)
					return
				}
				var returnLine string
				if result[0].Comment == "" {
					returnLine = result[0].Data
				} else {
					returnLine = fmt.Sprintf("%s # %s", result[0].Data, result[0].Comment)
				}
				if command != returnLine {
					t.Errorf("error: has [%s] expects [%s]", returnLine, command)
				}
			} else {
				if err == nil {
					t.Errorf("error: did not throw error for line [%s]", line)
				}
				_, parseErr := parser.Result()
				if parseErr == nil {
					t.Errorf("error: did not throw error on result for line [%s]", line)
				}
			}
		})
	}
	{{- if .HasTable}}
	for command, expected := range testsTable {
        t.Run(command, func(t *testing.T) {
        line :=strings.TrimSpace(command)
        lines := strings.SplitN(line,"\n", -1)
        var err error
        parser.Init()
        if len(lines)> 1{
            for _,line = range(lines){
              line = strings.TrimSpace(line)
                if err=ProcessLine(line, parser);err!=nil{
                    break
                }
            }
        }else{
            err = ProcessLine(line, parser)
        }
            if err != nil {
                t.Error(err)
                return
            }
            result, err := parser.Result()
            if err != nil {
                t.Error(err)
                return
            }
            var returnLine string
            if result[0].Comment == "" {
                returnLine = result[0].Data
            } else {
                returnLine = fmt.Sprintf("%s # %s", result[0].Data, result[0].Comment)
            }
            if expected != returnLine {
                t.Errorf("error: has [%s] expects [%s]", returnLine, expected)
            }
        })
    }
    {{- end}}
}

{{- if .HasAlias}}

func TestAlias{{ $StructName }}{{ .Dir }}(t *testing.T) {
	tests := map[string]bool{ {{ $AliasName := .StructName }}
	{{- range $index, $val := .TestAliasOK}} {{ $AliasName = $val.Alias }}
		"{{- $val.Test -}}": true,
	{{- end }}
	{{- range $index, $val := .TestAliasFail}}
		"{{- $val.Test -}}": false,
	{{- end }}
	}
	parser := {{- if .ModeOther}} &{{ .Dir }}{{- else }} &parsers{{- end }}.{{ $StructName }}{Alias:"{{ $AliasName }}"}
	for command, shouldPass := range tests {
		t.Run(command, func(t *testing.T) {
		line :=strings.TrimSpace(command)
		lines := strings.SplitN(line,"\n", -1)
		var err error
		parser.Init()
		if len(lines)> 1{
			for _,line = range(lines){
			  line = strings.TrimSpace(line)
				if err=ProcessLine(line, parser);err!=nil{
					break
				}
			}
		}else{
			err = ProcessLine(line, parser)
		}
			if shouldPass {
				if err != nil {
					t.Error(err)
					return
				}
				result, err := parser.Result()
				if err != nil {
					t.Error(err)
					return
				}
				var returnLine string
				if result[0].Comment == "" {
					returnLine = result[0].Data
				} else {
					returnLine = fmt.Sprintf("%s # %s", result[0].Data, result[0].Comment)
				}
				if command != returnLine {
					t.Errorf("error: has [%s] expects [%s]", returnLine, command)
				}
			} else {
				if err == nil {
					t.Errorf("error: did not throw error for line [%s]", line)
				}
				_, parseErr := parser.Result()
				if parseErr == nil {
					t.Errorf("error: did not throw error on result for line [%s]", line)
				}
			}
		})
	}
}
{{- end }}
