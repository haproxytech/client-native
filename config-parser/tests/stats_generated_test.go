// Code generated by go generate; DO NOT EDIT.
/*
Copyright 2019 HAProxy Technologies

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package tests

import (
	"fmt"
	"strings"
	"testing"

	"github.com/haproxytech/client-native/v6/config-parser/parsers/stats"
)

func TestStatsstats(t *testing.T) {
	tests := map[string]bool{
		`stats admin if LOCALHOST`:                                        true,
		`stats http-request auth realm HAProxy\\ Statistics`:              true,
		`stats http-request auth realm HAProxy\\ Statistics if something`: true,
		`stats http-request auth if something`:                            true,
		`stats http-request deny unless something`:                        true,
		`stats http-request allow`:                                        true,
		"stats auth admin1:AdMiN123":                                      true,
		"stats enable":                                                    true,
		"stats hide-version":                                              true,
		"stats show-legends":                                              true,
		"stats show-modules":                                              true,
		"stats maxconn 10":                                                true,
		"stats realm HAProxy\\ Statistics":                                true,
		"stats refresh 10s":                                               true,
		"stats scope .":                                                   true,
		"stats show-desc Master node for Europe, Asia, Africa":            true,
		"stats show-node":                                                 true,
		"stats show-node Europe-1":                                        true,
		"stats uri /admin?stats":                                          true,
		"stats bind-process all":                                          true,
		"stats bind-process odd":                                          true,
		"stats bind-process even":                                         true,
		"stats bind-process 1 2 3 4":                                      true,
		"stats bind-process 1-4":                                          true,
		"stats":                                                           false,
		"stats auth admin1:":                                              false,
		"stats auth":                                                      false,
		"stats NON-EXISTS":                                                false,
		"stats maxconn WORD":                                              false,
		"stats refresh":                                                   false,
		"stats scope":                                                     false,
		"stats uri":                                                       false,
		"stats bind-process none":                                         false,
		"stats bind-process 1+4":                                          false,
		"stats bind-process none-none":                                    false,
		"stats bind-process 1-4 1-3":                                      false,
		"stats http-request":                                              false,
		"stats http-request none":                                         false,
		"stats http-request realm HAProxy\\ Statistics":                   false,
		"---":     false,
		"--- ---": false,
	}
	parser := &stats.Stats{}
	for command, shouldPass := range tests {
		t.Run(command, func(t *testing.T) {
			line := strings.TrimSpace(command)
			lines := strings.SplitN(line, "\n", -1)
			var err error
			parser.Init()
			if len(lines) > 1 {
				for _, line = range lines {
					line = strings.TrimSpace(line)
					if err = ProcessLine(line, parser); err != nil {
						break
					}
				}
			} else {
				err = ProcessLine(line, parser)
			}
			if shouldPass {
				if err != nil {
					t.Error(err)
					return
				}
				result, err := parser.Result()
				if err != nil {
					t.Error(err)
					return
				}
				var returnLine string
				if result[0].Comment == "" {
					returnLine = result[0].Data
				} else {
					returnLine = fmt.Sprintf("%s # %s", result[0].Data, result[0].Comment)
				}
				if command != returnLine {
					t.Errorf("error: has [%s] expects [%s]", returnLine, command)
				}
			} else {
				if err == nil {
					t.Errorf("error: did not throw error for line [%s]", line)
				}
				_, parseErr := parser.Result()
				if parseErr == nil {
					t.Errorf("error: did not throw error on result for line [%s]", line)
				}
			}
		})
	}
}
