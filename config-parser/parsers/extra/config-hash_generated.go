// Code generated by go generate; DO NOT EDIT.
/*
Copyright 2019 HAProxy Technologies

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package extra

import (
	"github.com/haproxytech/client-native/v5/config-parser/common"
	"github.com/haproxytech/client-native/v5/config-parser/errors"
	"github.com/haproxytech/client-native/v5/config-parser/types"
)

func (p *ConfigHash) GetParserName() string {
	return p.Name
}

func (p *ConfigHash) GetPreComments() ([]string, error) {
	return p.preComments, nil
}

func (p *ConfigHash) SetPreComments(preComments []string) {
	p.preComments = preComments
}

func (p *ConfigHash) GetOne(index int) (common.ParserData, error) {
	if index > 0 {
		return nil, errors.ErrFetch
	}
	if p.data == nil {
		return nil, errors.ErrFetch
	}
	return p.data, nil
}

func (p *ConfigHash) Delete(index int) error {
	p.Init()
	return nil
}

func (p *ConfigHash) Insert(data common.ParserData, index int) error {
	return p.Set(data, index)
}

func (p *ConfigHash) Set(data common.ParserData, index int) error {
	if data == nil {
		p.Init()
		return nil
	}
	switch newValue := data.(type) {
	case *types.ConfigHash:
		p.data = newValue
	case types.ConfigHash:
		p.data = &newValue
	default:
		return errors.ErrInvalidData
	}
	return nil
}

func (p *ConfigHash) PreParse(line string, parts []string, preComments []string, comment string) (string, error) {
	changeState, err := p.Parse(line, parts, comment)
	if err == nil && preComments != nil {
		p.preComments = append(p.preComments, preComments...)
	}
	return changeState, err
}

func (p *ConfigHash) ResultAll() ([]common.ReturnResultLine, []string, error) {
	res, err := p.Result()
	return res, p.preComments, err
}
