// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"github.com/haproxytech/go-method-gen/pkg/eqdiff"
)

func (rec DefaultsBase) Equal(obj DefaultsBase, opts ...eqdiff.GoMethodGenOptions) bool {
	return EqualSlicePointerErrorfile(rec.ErrorFiles, obj.ErrorFiles, opts...) &&
		EqualSlicePointerErrorfiles(rec.ErrorFilesFromHTTPErrors, obj.ErrorFilesFromHTTPErrors, opts...) &&
		EqualSliceString(rec.LogSteps, obj.LogSteps, opts...) &&
		rec.Abortonclose == obj.Abortonclose &&
		rec.AcceptInvalidHTTPRequest == obj.AcceptInvalidHTTPRequest &&
		rec.AcceptInvalidHTTPResponse == obj.AcceptInvalidHTTPResponse &&
		rec.AcceptUnsafeViolationsInHTTPRequest == obj.AcceptUnsafeViolationsInHTTPRequest &&
		rec.AcceptUnsafeViolationsInHTTPResponse == obj.AcceptUnsafeViolationsInHTTPResponse &&
		rec.AdvCheck == obj.AdvCheck &&
		rec.Allbackups == obj.Allbackups &&
		EqualPointerInt64(rec.Backlog, obj.Backlog, opts...) &&
		EqualPointerBalance(rec.Balance, obj.Balance, opts...) &&
		EqualPointerInt64(rec.CheckTimeout, obj.CheckTimeout, opts...) &&
		rec.Checkcache == obj.Checkcache &&
		rec.Clflog == obj.Clflog &&
		EqualPointerInt64(rec.ClientFinTimeout, obj.ClientFinTimeout, opts...) &&
		EqualPointerInt64(rec.ClientTimeout, obj.ClientTimeout, opts...) &&
		rec.Clitcpka == obj.Clitcpka &&
		EqualPointerInt64(rec.ClitcpkaCnt, obj.ClitcpkaCnt, opts...) &&
		EqualPointerInt64(rec.ClitcpkaIdle, obj.ClitcpkaIdle, opts...) &&
		EqualPointerInt64(rec.ClitcpkaIntvl, obj.ClitcpkaIntvl, opts...) &&
		EqualPointerCompression(rec.Compression, obj.Compression, opts...) &&
		EqualPointerInt64(rec.ConnectTimeout, obj.ConnectTimeout, opts...) &&
		rec.Contstats == obj.Contstats &&
		EqualPointerCookie(rec.Cookie, obj.Cookie, opts...) &&
		rec.DefaultBackend == obj.DefaultBackend &&
		EqualPointerDefaultServer(rec.DefaultServer, obj.DefaultServer, opts...) &&
		rec.DisableH2Upgrade == obj.DisableH2Upgrade &&
		rec.Disabled == obj.Disabled &&
		rec.DontlogNormal == obj.DontlogNormal &&
		rec.Dontlognull == obj.Dontlognull &&
		rec.DynamicCookieKey == obj.DynamicCookieKey &&
		EqualPointerEmailAlert(rec.EmailAlert, obj.EmailAlert, opts...) &&
		rec.Enabled == obj.Enabled &&
		rec.ErrorLogFormat == obj.ErrorLogFormat &&
		EqualPointerErrorloc(rec.Errorloc302, obj.Errorloc302, opts...) &&
		EqualPointerErrorloc(rec.Errorloc303, obj.Errorloc303, opts...) &&
		rec.ExternalCheck == obj.ExternalCheck &&
		rec.ExternalCheckCommand == obj.ExternalCheckCommand &&
		rec.ExternalCheckPath == obj.ExternalCheckPath &&
		EqualPointerForwardfor(rec.Forwardfor, obj.Forwardfor, opts...) &&
		rec.From == obj.From &&
		EqualPointerInt64(rec.Fullconn, obj.Fullconn, opts...) &&
		rec.H1CaseAdjustBogusClient == obj.H1CaseAdjustBogusClient &&
		rec.H1CaseAdjustBogusServer == obj.H1CaseAdjustBogusServer &&
		EqualPointerInt64(rec.HashBalanceFactor, obj.HashBalanceFactor, opts...) &&
		rec.HashPreserveAffinity == obj.HashPreserveAffinity &&
		EqualPointerHashType(rec.HashType, obj.HashType, opts...) &&
		rec.HTTPBufferRequest == obj.HTTPBufferRequest &&
		rec.HTTPDropRequestTrailers == obj.HTTPDropRequestTrailers &&
		rec.HTTPDropResponseTrailers == obj.HTTPDropResponseTrailers &&
		rec.HTTPUseHtx == obj.HTTPUseHtx &&
		rec.HTTPConnectionMode == obj.HTTPConnectionMode &&
		rec.HTTPIgnoreProbes == obj.HTTPIgnoreProbes &&
		EqualPointerInt64(rec.HTTPKeepAliveTimeout, obj.HTTPKeepAliveTimeout, opts...) &&
		rec.HTTPNoDelay == obj.HTTPNoDelay &&
		rec.HTTPPretendKeepalive == obj.HTTPPretendKeepalive &&
		EqualPointerInt64(rec.HTTPRequestTimeout, obj.HTTPRequestTimeout, opts...) &&
		rec.HTTPRestrictReqHdrNames == obj.HTTPRestrictReqHdrNames &&
		rec.HTTPReuse == obj.HTTPReuse &&
		EqualPointerString(rec.HTTPSendNameHeader, obj.HTTPSendNameHeader, opts...) &&
		rec.HTTPUseProxyHeader == obj.HTTPUseProxyHeader &&
		EqualPointerHttpchkParams(rec.HttpchkParams, obj.HttpchkParams, opts...) &&
		rec.Httplog == obj.Httplog &&
		rec.Httpslog == obj.Httpslog &&
		rec.IdleCloseOnResponse == obj.IdleCloseOnResponse &&
		rec.IndependentStreams == obj.IndependentStreams &&
		rec.LoadServerStateFromFile == obj.LoadServerStateFromFile &&
		rec.LogFormat == obj.LogFormat &&
		rec.LogFormatSd == obj.LogFormatSd &&
		rec.LogHealthChecks == obj.LogHealthChecks &&
		rec.LogSeparateErrors == obj.LogSeparateErrors &&
		rec.LogTag == obj.LogTag &&
		rec.Logasap == obj.Logasap &&
		EqualPointerInt64(rec.MaxKeepAliveQueue, obj.MaxKeepAliveQueue, opts...) &&
		EqualPointerInt64(rec.Maxconn, obj.Maxconn, opts...) &&
		EqualMapStringInterface(rec.Metadata, obj.Metadata, opts...) &&
		rec.Mode == obj.Mode &&
		rec.MonitorURI.Equal(obj.MonitorURI, opts...) &&
		EqualPointerMysqlCheckParams(rec.MysqlCheckParams, obj.MysqlCheckParams, opts...) &&
		rec.Name == obj.Name &&
		rec.Nolinger == obj.Nolinger &&
		EqualPointerOriginalto(rec.Originalto, obj.Originalto, opts...) &&
		rec.Persist == obj.Persist &&
		EqualPointerPersistRule(rec.PersistRule, obj.PersistRule, opts...) &&
		EqualPointerPgsqlCheckParams(rec.PgsqlCheckParams, obj.PgsqlCheckParams, opts...) &&
		rec.PreferLastServer == obj.PreferLastServer &&
		EqualPointerInt64(rec.QueueTimeout, obj.QueueTimeout, opts...) &&
		EqualPointerRedispatch(rec.Redispatch, obj.Redispatch, opts...) &&
		EqualPointerInt64(rec.Retries, obj.Retries, opts...) &&
		rec.RetryOn == obj.RetryOn &&
		EqualPointerInt64(rec.ServerFinTimeout, obj.ServerFinTimeout, opts...) &&
		EqualPointerInt64(rec.ServerTimeout, obj.ServerTimeout, opts...) &&
		EqualPointerSmtpchkParams(rec.SmtpchkParams, obj.SmtpchkParams, opts...) &&
		rec.SocketStats == obj.SocketStats &&
		EqualPointerSource(rec.Source, obj.Source, opts...) &&
		rec.SpliceAuto == obj.SpliceAuto &&
		rec.SpliceRequest == obj.SpliceRequest &&
		rec.SpliceResponse == obj.SpliceResponse &&
		rec.Srvtcpka == obj.Srvtcpka &&
		EqualPointerInt64(rec.SrvtcpkaCnt, obj.SrvtcpkaCnt, opts...) &&
		EqualPointerInt64(rec.SrvtcpkaIdle, obj.SrvtcpkaIdle, opts...) &&
		EqualPointerInt64(rec.SrvtcpkaIntvl, obj.SrvtcpkaIntvl, opts...) &&
		EqualPointerStatsOptions(rec.StatsOptions, obj.StatsOptions, opts...) &&
		EqualPointerInt64(rec.TarpitTimeout, obj.TarpitTimeout, opts...) &&
		rec.TCPSmartAccept == obj.TCPSmartAccept &&
		rec.TCPSmartConnect == obj.TCPSmartConnect &&
		rec.Tcpka == obj.Tcpka &&
		rec.Tcplog == obj.Tcplog &&
		rec.Transparent == obj.Transparent &&
		EqualPointerInt64(rec.TunnelTimeout, obj.TunnelTimeout, opts...) &&
		rec.UniqueIDFormat == obj.UniqueIDFormat &&
		rec.UniqueIDHeader == obj.UniqueIDHeader
}
