// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

func (rec TCPCheck) Diff(obj TCPCheck) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if rec.Action != obj.Action {
		diff["Action"] = []interface{}{rec.Action, obj.Action}
	}
	if rec.Addr != obj.Addr {
		diff["Addr"] = []interface{}{rec.Addr, obj.Addr}
	}
	if rec.Alpn != obj.Alpn {
		diff["Alpn"] = []interface{}{rec.Alpn, obj.Alpn}
	}
	if rec.CheckComment != obj.CheckComment {
		diff["CheckComment"] = []interface{}{rec.CheckComment, obj.CheckComment}
	}
	if rec.Data != obj.Data {
		diff["Data"] = []interface{}{rec.Data, obj.Data}
	}
	if rec.Default != obj.Default {
		diff["Default"] = []interface{}{rec.Default, obj.Default}
	}
	if rec.ErrorStatus != obj.ErrorStatus {
		diff["ErrorStatus"] = []interface{}{rec.ErrorStatus, obj.ErrorStatus}
	}
	if rec.ExclamationMark != obj.ExclamationMark {
		diff["ExclamationMark"] = []interface{}{rec.ExclamationMark, obj.ExclamationMark}
	}
	if rec.Fmt != obj.Fmt {
		diff["Fmt"] = []interface{}{rec.Fmt, obj.Fmt}
	}
	if rec.HexFmt != obj.HexFmt {
		diff["HexFmt"] = []interface{}{rec.HexFmt, obj.HexFmt}
	}
	if rec.HexString != obj.HexString {
		diff["HexString"] = []interface{}{rec.HexString, obj.HexString}
	}
	if rec.Linger != obj.Linger {
		diff["Linger"] = []interface{}{rec.Linger, obj.Linger}
	}
	if rec.Match != obj.Match {
		diff["Match"] = []interface{}{rec.Match, obj.Match}
	}
	if rec.MinRecv != obj.MinRecv {
		diff["MinRecv"] = []interface{}{rec.MinRecv, obj.MinRecv}
	}
	if rec.OkStatus != obj.OkStatus {
		diff["OkStatus"] = []interface{}{rec.OkStatus, obj.OkStatus}
	}
	if rec.OnError != obj.OnError {
		diff["OnError"] = []interface{}{rec.OnError, obj.OnError}
	}
	if rec.OnSuccess != obj.OnSuccess {
		diff["OnSuccess"] = []interface{}{rec.OnSuccess, obj.OnSuccess}
	}
	if rec.Pattern != obj.Pattern {
		diff["Pattern"] = []interface{}{rec.Pattern, obj.Pattern}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Port, obj.Port) {
		diff["Port."+diffKey] = diffValue
	}
	if rec.PortString != obj.PortString {
		diff["PortString"] = []interface{}{rec.PortString, obj.PortString}
	}
	if rec.Proto != obj.Proto {
		diff["Proto"] = []interface{}{rec.Proto, obj.Proto}
	}
	if rec.SendProxy != obj.SendProxy {
		diff["SendProxy"] = []interface{}{rec.SendProxy, obj.SendProxy}
	}
	if rec.Sni != obj.Sni {
		diff["Sni"] = []interface{}{rec.Sni, obj.Sni}
	}
	if rec.Ssl != obj.Ssl {
		diff["Ssl"] = []interface{}{rec.Ssl, obj.Ssl}
	}
	if rec.StatusCode != obj.StatusCode {
		diff["StatusCode"] = []interface{}{rec.StatusCode, obj.StatusCode}
	}
	if rec.ToutStatus != obj.ToutStatus {
		diff["ToutStatus"] = []interface{}{rec.ToutStatus, obj.ToutStatus}
	}
	if rec.VarExpr != obj.VarExpr {
		diff["VarExpr"] = []interface{}{rec.VarExpr, obj.VarExpr}
	}
	if rec.VarFmt != obj.VarFmt {
		diff["VarFmt"] = []interface{}{rec.VarFmt, obj.VarFmt}
	}
	if rec.VarName != obj.VarName {
		diff["VarName"] = []interface{}{rec.VarName, obj.VarName}
	}
	if rec.VarScope != obj.VarScope {
		diff["VarScope"] = []interface{}{rec.VarScope, obj.VarScope}
	}
	if rec.ViaSocks4 != obj.ViaSocks4 {
		diff["ViaSocks4"] = []interface{}{rec.ViaSocks4, obj.ViaSocks4}
	}
	return diff
}
