// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"github.com/haproxytech/go-method-gen/pkg/eqdiff"
)

func (rec AwsRegion) Equal(obj AwsRegion, opts ...eqdiff.GoMethodGenOptions) bool {
	return rec.AccessKeyID == obj.AccessKeyID &&
		EqualSlicePointerAwsFilters(rec.Allowlist, obj.Allowlist, opts...) &&
		EqualSlicePointerAwsFilters(rec.Denylist, obj.Denylist, opts...) &&
		rec.Description == obj.Description &&
		EqualPointerBool(rec.Enabled, obj.Enabled, opts...) &&
		EqualPointerString(rec.ID, obj.ID, opts...) &&
		EqualPointerString(rec.IPV4Address, obj.IPV4Address, opts...) &&
		EqualPointerString(rec.Name, obj.Name, opts...) &&
		EqualPointerString(rec.Region, obj.Region, opts...) &&
		EqualPointerInt64(rec.RetryTimeout, obj.RetryTimeout, opts...) &&
		rec.SecretAccessKey == obj.SecretAccessKey &&
		EqualPointerInt64(rec.ServerSlotsBase, obj.ServerSlotsBase, opts...) &&
		rec.ServerSlotsGrowthIncrement == obj.ServerSlotsGrowthIncrement &&
		EqualPointerString(rec.ServerSlotsGrowthType, obj.ServerSlotsGrowthType, opts...)
}

func EqualPointerAwsFilters(x, y *AwsFilters, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerBool(x, y *bool, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return *x == *y
}

func EqualSlicePointerAwsFilters(x, y []*AwsFilters, opts ...eqdiff.GoMethodGenOptions) bool {
	var opt *eqdiff.GoMethodGenOptions
	if len(opts) > 0 {
		opt = &opts[0]
	}

	if (x == nil) != (y == nil) {
		if opt == nil || (opt != nil && !opt.TreatNilNotAsEmpty) {
			if len(x) == 0 && len(y) == 0 {
				return true
			}
		}
		return false
	}

	if len(x) != len(y) {
		return false
	}

	for i, vx := range x {
		vy := y[i]
		if !EqualPointerAwsFilters(vx, vy, opts...) {
			return false
		}
	}

	return true
}
