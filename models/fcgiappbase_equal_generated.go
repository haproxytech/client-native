// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"github.com/haproxytech/go-method-gen/pkg/eqdiff"
)

func (rec FCGIAppBase) Equal(obj FCGIAppBase, opts ...eqdiff.GoMethodGenOptions) bool {
	return EqualPointerString(rec.Docroot, obj.Docroot, opts...) &&
		rec.GetValues == obj.GetValues &&
		rec.Index == obj.Index &&
		rec.KeepConn == obj.KeepConn &&
		EqualSlicePointerFCGILogStderr(rec.LogStderrs, obj.LogStderrs, opts...) &&
		rec.MaxReqs == obj.MaxReqs &&
		EqualMapStringInterface(rec.Metadata, obj.Metadata, opts...) &&
		rec.MpxsConns == obj.MpxsConns &&
		rec.Name == obj.Name &&
		EqualSlicePointerFCGIPassHeader(rec.PassHeaders, obj.PassHeaders, opts...) &&
		rec.PathInfo == obj.PathInfo &&
		EqualSlicePointerFCGISetParam(rec.SetParams, obj.SetParams, opts...)
}

func EqualPointerFCGILogStderr(x, y *FCGILogStderr, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerFCGIPassHeader(x, y *FCGIPassHeader, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerFCGISetParam(x, y *FCGISetParam, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualSlicePointerFCGILogStderr(x, y []*FCGILogStderr, opts ...eqdiff.GoMethodGenOptions) bool {
	var opt *eqdiff.GoMethodGenOptions
	if len(opts) > 0 {
		opt = &opts[0]
	}

	if (x == nil) != (y == nil) {
		if opt == nil || (opt != nil && !opt.TreatNilNotAsEmpty) {
			if len(x) == 0 && len(y) == 0 {
				return true
			}
		}
		return false
	}

	if len(x) != len(y) {
		return false
	}

	for i, vx := range x {
		vy := y[i]
		if !EqualPointerFCGILogStderr(vx, vy, opts...) {
			return false
		}
	}

	return true
}

func EqualSlicePointerFCGIPassHeader(x, y []*FCGIPassHeader, opts ...eqdiff.GoMethodGenOptions) bool {
	var opt *eqdiff.GoMethodGenOptions
	if len(opts) > 0 {
		opt = &opts[0]
	}

	if (x == nil) != (y == nil) {
		if opt == nil || (opt != nil && !opt.TreatNilNotAsEmpty) {
			if len(x) == 0 && len(y) == 0 {
				return true
			}
		}
		return false
	}

	if len(x) != len(y) {
		return false
	}

	for i, vx := range x {
		vy := y[i]
		if !EqualPointerFCGIPassHeader(vx, vy, opts...) {
			return false
		}
	}

	return true
}

func EqualSlicePointerFCGISetParam(x, y []*FCGISetParam, opts ...eqdiff.GoMethodGenOptions) bool {
	var opt *eqdiff.GoMethodGenOptions
	if len(opts) > 0 {
		opt = &opts[0]
	}

	if (x == nil) != (y == nil) {
		if opt == nil || (opt != nil && !opt.TreatNilNotAsEmpty) {
			if len(x) == 0 && len(y) == 0 {
				return true
			}
		}
		return false
	}

	if len(x) != len(y) {
		return false
	}

	for i, vx := range x {
		vy := y[i]
		if !EqualPointerFCGISetParam(vx, vy, opts...) {
			return false
		}
	}

	return true
}
