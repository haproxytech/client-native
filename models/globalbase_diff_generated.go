// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"fmt"
)

func DiffPointerHTTPClientOptions(x, y *HTTPClientOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "HTTPClientOptions"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerTuneZlibOptions(x, y *TuneZlibOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "TuneZlibOptions"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffSlicePointerCPUMap(x, y []*CPUMap) map[string][]interface{} {
	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}

	if x == nil {
		return map[string][]interface{}{"": {nil, y}}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		for diffKey, diffValue := range DiffPointerCPUMap(vx, vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}

func DiffPointerRuntimeAPI(x, y *RuntimeAPI) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "*RuntimeAPI"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerGlobalHarden(x, y *GlobalHarden) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "Harden"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerGlobalLogSendHostname(x, y *GlobalLogSendHostname) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "LogSendHostname"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerTuneOptions(x, y *TuneOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "TuneOptions"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffSlicePointerCPUSet(x, y []*CPUSet) map[string][]interface{} {
	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}

	if x == nil {
		return map[string][]interface{}{"": {nil, y}}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		for diffKey, diffValue := range DiffPointerCPUSet(vx, vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}

func DiffPointerEnvironmentOptions(x, y *EnvironmentOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "EnvironmentOptions"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerTuneSslOptions(x, y *TuneSslOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "TuneSslOptions"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerCPUMap(x, y *CPUMap) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "*CPUMap"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffSlicePointerRuntimeAPI(x, y []*RuntimeAPI) map[string][]interface{} {
	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}

	if x == nil {
		return map[string][]interface{}{"": {nil, y}}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		for diffKey, diffValue := range DiffPointerRuntimeAPI(vx, vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}

func DiffPointerSetVar(x, y *SetVar) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "*SetVar"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffSlicePointerThreadGroup(x, y []*ThreadGroup) map[string][]interface{} {
	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}

	if x == nil {
		return map[string][]interface{}{"": {nil, y}}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		for diffKey, diffValue := range DiffPointerThreadGroup(vx, vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}

func DiffPointerDebugOptions(x, y *DebugOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "DebugOptions"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerOcspUpdateOptions(x, y *OcspUpdateOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "OcspUpdateOptions"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerPerformanceOptions(x, y *PerformanceOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "PerformanceOptions"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerWurflOptions(x, y *WurflOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "WurflOptions"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffSlicePointerH1CaseAdjust(x, y []*H1CaseAdjust) map[string][]interface{} {
	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}

	if x == nil {
		return map[string][]interface{}{"": {nil, y}}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		for diffKey, diffValue := range DiffPointerH1CaseAdjust(vx, vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}

func DiffPointerLuaOptions(x, y *LuaOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "LuaOptions"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerTuneLuaOptions(x, y *TuneLuaOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "TuneLuaOptions"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerCPUSet(x, y *CPUSet) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "*CPUSet"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerFiftyOneDegreesOptions(x, y *FiftyOneDegreesOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "FiftyOneDegreesOptions"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerHTTPCodes(x, y *HTTPCodes) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "*HTTPCodes"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerSslOptions(x, y *SslOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "SslOptions"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerTuneBufferOptions(x, y *TuneBufferOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "TuneBufferOptions"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerTuneQuicOptions(x, y *TuneQuicOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "TuneQuicOptions"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerTuneVarsOptions(x, y *TuneVarsOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "TuneVarsOptions"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func (rec GlobalBase) Diff(obj GlobalBase) map[string][]interface{} {
	diff := make(map[string][]interface{})
	for diffKey, diffValue := range DiffSlicePointerCPUMap(rec.CPUMaps, obj.CPUMaps) {
		diff["CPUMaps"+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffSlicePointerCPUSet(rec.CPUSets, obj.CPUSets) {
		diff["CPUSets"+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffSlicePointerH1CaseAdjust(rec.H1CaseAdjusts, obj.H1CaseAdjusts) {
		diff["H1CaseAdjusts"+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffSlicePointerRuntimeAPI(rec.RuntimeAPIs, obj.RuntimeAPIs) {
		diff["RuntimeAPIs"+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffSlicePointerSetVarFmt(rec.SetVarFmts, obj.SetVarFmts) {
		diff["SetVarFmts"+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffSlicePointerSetVar(rec.SetVars, obj.SetVars) {
		diff["SetVars"+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffSlicePointerThreadGroup(rec.ThreadGroupLines, obj.ThreadGroupLines) {
		diff["ThreadGroupLines"+diffKey] = diffValue
	}
	if rec.Chroot != obj.Chroot {
		diff["Chroot"] = []interface{}{rec.Chroot, obj.Chroot}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CloseSpreadTime, obj.CloseSpreadTime) {
		diff["CloseSpreadTime."+diffKey] = diffValue
	}
	if rec.ClusterSecret != obj.ClusterSecret {
		diff["ClusterSecret"] = []interface{}{rec.ClusterSecret, obj.ClusterSecret}
	}
	if rec.CPUPolicy != obj.CPUPolicy {
		diff["CPUPolicy"] = []interface{}{rec.CPUPolicy, obj.CPUPolicy}
	}
	if rec.Daemon != obj.Daemon {
		diff["Daemon"] = []interface{}{rec.Daemon, obj.Daemon}
	}
	for diffKey, diffValue := range DiffPointerDebugOptions(rec.DebugOptions, obj.DebugOptions) {
		diff["DebugOptions."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerGlobalDefaultPath(rec.DefaultPath, obj.DefaultPath) {
		diff["DefaultPath."+diffKey] = diffValue
	}
	if rec.Description != obj.Description {
		diff["Description"] = []interface{}{rec.Description, obj.Description}
	}
	for diffKey, diffValue := range DiffPointerDeviceAtlasOptions(rec.DeviceAtlasOptions, obj.DeviceAtlasOptions) {
		diff["DeviceAtlasOptions."+diffKey] = diffValue
	}
	if rec.DNSAcceptFamily != obj.DNSAcceptFamily {
		diff["DNSAcceptFamily"] = []interface{}{rec.DNSAcceptFamily, obj.DNSAcceptFamily}
	}
	for diffKey, diffValue := range DiffPointerEnvironmentOptions(rec.EnvironmentOptions, obj.EnvironmentOptions) {
		diff["EnvironmentOptions."+diffKey] = diffValue
	}
	if rec.ExposeDeprecatedDirectives != obj.ExposeDeprecatedDirectives {
		diff["ExposeDeprecatedDirectives"] = []interface{}{rec.ExposeDeprecatedDirectives, obj.ExposeDeprecatedDirectives}
	}
	if rec.ExposeExperimentalDirectives != obj.ExposeExperimentalDirectives {
		diff["ExposeExperimentalDirectives"] = []interface{}{rec.ExposeExperimentalDirectives, obj.ExposeExperimentalDirectives}
	}
	if rec.ExternalCheck != obj.ExternalCheck {
		diff["ExternalCheck"] = []interface{}{rec.ExternalCheck, obj.ExternalCheck}
	}
	for diffKey, diffValue := range DiffPointerFiftyOneDegreesOptions(rec.FiftyOneDegreesOptions, obj.FiftyOneDegreesOptions) {
		diff["FiftyOneDegreesOptions."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ForceCfgParserPause, obj.ForceCfgParserPause) {
		diff["ForceCfgParserPause."+diffKey] = diffValue
	}
	if rec.Gid != obj.Gid {
		diff["Gid"] = []interface{}{rec.Gid, obj.Gid}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Grace, obj.Grace) {
		diff["Grace."+diffKey] = diffValue
	}
	if rec.Group != obj.Group {
		diff["Group"] = []interface{}{rec.Group, obj.Group}
	}
	if rec.H1AcceptPayloadWithAnyMethod != obj.H1AcceptPayloadWithAnyMethod {
		diff["H1AcceptPayloadWithAnyMethod"] = []interface{}{rec.H1AcceptPayloadWithAnyMethod, obj.H1AcceptPayloadWithAnyMethod}
	}
	if rec.H1CaseAdjustFile != obj.H1CaseAdjustFile {
		diff["H1CaseAdjustFile"] = []interface{}{rec.H1CaseAdjustFile, obj.H1CaseAdjustFile}
	}
	if rec.H1DoNotCloseOnInsecureTransferEncoding != obj.H1DoNotCloseOnInsecureTransferEncoding {
		diff["H1DoNotCloseOnInsecureTransferEncoding"] = []interface{}{rec.H1DoNotCloseOnInsecureTransferEncoding, obj.H1DoNotCloseOnInsecureTransferEncoding}
	}
	if rec.H2WorkaroundBogusWebsocketClients != obj.H2WorkaroundBogusWebsocketClients {
		diff["H2WorkaroundBogusWebsocketClients"] = []interface{}{rec.H2WorkaroundBogusWebsocketClients, obj.H2WorkaroundBogusWebsocketClients}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.HardStopAfter, obj.HardStopAfter) {
		diff["HardStopAfter."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerGlobalHarden(rec.Harden, obj.Harden) {
		diff["Harden."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerHTTPClientOptions(rec.HTTPClientOptions, obj.HTTPClientOptions) {
		diff["HTTPClientOptions."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffSlicePointerHTTPCodes(rec.HTTPErrCodes, obj.HTTPErrCodes) {
		diff["HTTPErrCodes"+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffSlicePointerHTTPCodes(rec.HTTPFailCodes, obj.HTTPFailCodes) {
		diff["HTTPFailCodes"+diffKey] = diffValue
	}
	if rec.InsecureForkWanted != obj.InsecureForkWanted {
		diff["InsecureForkWanted"] = []interface{}{rec.InsecureForkWanted, obj.InsecureForkWanted}
	}
	if rec.InsecureSetuidWanted != obj.InsecureSetuidWanted {
		diff["InsecureSetuidWanted"] = []interface{}{rec.InsecureSetuidWanted, obj.InsecureSetuidWanted}
	}
	if rec.LimitedQuic != obj.LimitedQuic {
		diff["LimitedQuic"] = []interface{}{rec.LimitedQuic, obj.LimitedQuic}
	}
	if rec.Localpeer != obj.Localpeer {
		diff["Localpeer"] = []interface{}{rec.Localpeer, obj.Localpeer}
	}
	for diffKey, diffValue := range DiffPointerGlobalLogSendHostname(rec.LogSendHostname, obj.LogSendHostname) {
		diff["LogSendHostname."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerLuaOptions(rec.LuaOptions, obj.LuaOptions) {
		diff["LuaOptions."+diffKey] = diffValue
	}
	if rec.MasterWorker != obj.MasterWorker {
		diff["MasterWorker"] = []interface{}{rec.MasterWorker, obj.MasterWorker}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.MworkerMaxReloads, obj.MworkerMaxReloads) {
		diff["MworkerMaxReloads."+diffKey] = diffValue
	}
	if rec.Nbthread != obj.Nbthread {
		diff["Nbthread"] = []interface{}{rec.Nbthread, obj.Nbthread}
	}
	if rec.NoQuic != obj.NoQuic {
		diff["NoQuic"] = []interface{}{rec.NoQuic, obj.NoQuic}
	}
	if rec.Node != obj.Node {
		diff["Node"] = []interface{}{rec.Node, obj.Node}
	}
	if rec.NumaCPUMapping != obj.NumaCPUMapping {
		diff["NumaCPUMapping"] = []interface{}{rec.NumaCPUMapping, obj.NumaCPUMapping}
	}
	for diffKey, diffValue := range DiffPointerOcspUpdateOptions(rec.OcspUpdateOptions, obj.OcspUpdateOptions) {
		diff["OcspUpdateOptions."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerPerformanceOptions(rec.PerformanceOptions, obj.PerformanceOptions) {
		diff["PerformanceOptions."+diffKey] = diffValue
	}
	if rec.Pidfile != obj.Pidfile {
		diff["Pidfile"] = []interface{}{rec.Pidfile, obj.Pidfile}
	}
	if rec.Pp2NeverSendLocal != obj.Pp2NeverSendLocal {
		diff["Pp2NeverSendLocal"] = []interface{}{rec.Pp2NeverSendLocal, obj.Pp2NeverSendLocal}
	}
	if rec.PreallocFd != obj.PreallocFd {
		diff["PreallocFd"] = []interface{}{rec.PreallocFd, obj.PreallocFd}
	}
	if rec.SetDumpable != obj.SetDumpable {
		diff["SetDumpable"] = []interface{}{rec.SetDumpable, obj.SetDumpable}
	}
	if rec.Setcap != obj.Setcap {
		diff["Setcap"] = []interface{}{rec.Setcap, obj.Setcap}
	}
	for diffKey, diffValue := range DiffPointerSslOptions(rec.SslOptions, obj.SslOptions) {
		diff["SslOptions."+diffKey] = diffValue
	}
	if rec.StatsFile != obj.StatsFile {
		diff["StatsFile"] = []interface{}{rec.StatsFile, obj.StatsFile}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.StatsMaxconn, obj.StatsMaxconn) {
		diff["StatsMaxconn."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.StatsTimeout, obj.StatsTimeout) {
		diff["StatsTimeout."+diffKey] = diffValue
	}
	if rec.StrictLimits != obj.StrictLimits {
		diff["StrictLimits"] = []interface{}{rec.StrictLimits, obj.StrictLimits}
	}
	if rec.ThreadGroups != obj.ThreadGroups {
		diff["ThreadGroups"] = []interface{}{rec.ThreadGroups, obj.ThreadGroups}
	}
	for diffKey, diffValue := range DiffPointerTuneBufferOptions(rec.TuneBufferOptions, obj.TuneBufferOptions) {
		diff["TuneBufferOptions."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerTuneLuaOptions(rec.TuneLuaOptions, obj.TuneLuaOptions) {
		diff["TuneLuaOptions."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerTuneOptions(rec.TuneOptions, obj.TuneOptions) {
		diff["TuneOptions."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerTuneQuicOptions(rec.TuneQuicOptions, obj.TuneQuicOptions) {
		diff["TuneQuicOptions."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerTuneSslOptions(rec.TuneSslOptions, obj.TuneSslOptions) {
		diff["TuneSslOptions."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerTuneVarsOptions(rec.TuneVarsOptions, obj.TuneVarsOptions) {
		diff["TuneVarsOptions."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerTuneZlibOptions(rec.TuneZlibOptions, obj.TuneZlibOptions) {
		diff["TuneZlibOptions."+diffKey] = diffValue
	}
	if rec.UID != obj.UID {
		diff["UID"] = []interface{}{rec.UID, obj.UID}
	}
	if rec.Ulimitn != obj.Ulimitn {
		diff["Ulimitn"] = []interface{}{rec.Ulimitn, obj.Ulimitn}
	}
	if rec.User != obj.User {
		diff["User"] = []interface{}{rec.User, obj.User}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.WarnBlockedTrafficAfter, obj.WarnBlockedTrafficAfter) {
		diff["WarnBlockedTrafficAfter."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerWurflOptions(rec.WurflOptions, obj.WurflOptions) {
		diff["WurflOptions."+diffKey] = diffValue
	}
	return diff
}

func DiffPointerH1CaseAdjust(x, y *H1CaseAdjust) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "*H1CaseAdjust"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerGlobalDefaultPath(x, y *GlobalDefaultPath) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "DefaultPath"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffSlicePointerHTTPCodes(x, y []*HTTPCodes) map[string][]interface{} {
	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}

	if x == nil {
		return map[string][]interface{}{"": {nil, y}}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		for diffKey, diffValue := range DiffPointerHTTPCodes(vx, vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}

func DiffSlicePointerSetVarFmt(x, y []*SetVarFmt) map[string][]interface{} {
	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}

	if x == nil {
		return map[string][]interface{}{"": {nil, y}}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		for diffKey, diffValue := range DiffPointerSetVarFmt(vx, vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}

func DiffPointerSetVarFmt(x, y *SetVarFmt) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "*SetVarFmt"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffSlicePointerSetVar(x, y []*SetVar) map[string][]interface{} {
	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}

	if x == nil {
		return map[string][]interface{}{"": {nil, y}}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		for diffKey, diffValue := range DiffPointerSetVar(vx, vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}

func DiffPointerDeviceAtlasOptions(x, y *DeviceAtlasOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "DeviceAtlasOptions"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerThreadGroup(x, y *ThreadGroup) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "*ThreadGroup"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}
