// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"github.com/haproxytech/go-method-gen/pkg/eqdiff"
)

func (rec HTTPAfterResponseRule) Diff(obj HTTPAfterResponseRule, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if rec.ACLFile != obj.ACLFile {
		diff["ACLFile"] = []interface{}{rec.ACLFile, obj.ACLFile}
	}
	if rec.ACLKeyfmt != obj.ACLKeyfmt {
		diff["ACLKeyfmt"] = []interface{}{rec.ACLKeyfmt, obj.ACLKeyfmt}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CaptureID, obj.CaptureID, opts...) {
		diff["CaptureID."+diffKey] = diffValue
	}
	if rec.CaptureLen != obj.CaptureLen {
		diff["CaptureLen"] = []interface{}{rec.CaptureLen, obj.CaptureLen}
	}
	if rec.CaptureSample != obj.CaptureSample {
		diff["CaptureSample"] = []interface{}{rec.CaptureSample, obj.CaptureSample}
	}
	if rec.Cond != obj.Cond {
		diff["Cond"] = []interface{}{rec.Cond, obj.Cond}
	}
	if rec.CondTest != obj.CondTest {
		diff["CondTest"] = []interface{}{rec.CondTest, obj.CondTest}
	}
	if rec.HdrFormat != obj.HdrFormat {
		diff["HdrFormat"] = []interface{}{rec.HdrFormat, obj.HdrFormat}
	}
	if rec.HdrMatch != obj.HdrMatch {
		diff["HdrMatch"] = []interface{}{rec.HdrMatch, obj.HdrMatch}
	}
	if rec.HdrMethod != obj.HdrMethod {
		diff["HdrMethod"] = []interface{}{rec.HdrMethod, obj.HdrMethod}
	}
	if rec.HdrName != obj.HdrName {
		diff["HdrName"] = []interface{}{rec.HdrName, obj.HdrName}
	}
	if rec.LogLevel != obj.LogLevel {
		diff["LogLevel"] = []interface{}{rec.LogLevel, obj.LogLevel}
	}
	if rec.MapFile != obj.MapFile {
		diff["MapFile"] = []interface{}{rec.MapFile, obj.MapFile}
	}
	if rec.MapKeyfmt != obj.MapKeyfmt {
		diff["MapKeyfmt"] = []interface{}{rec.MapKeyfmt, obj.MapKeyfmt}
	}
	if rec.MapValuefmt != obj.MapValuefmt {
		diff["MapValuefmt"] = []interface{}{rec.MapValuefmt, obj.MapValuefmt}
	}
	if rec.ScExpr != obj.ScExpr {
		diff["ScExpr"] = []interface{}{rec.ScExpr, obj.ScExpr}
	}
	if rec.ScID != obj.ScID {
		diff["ScID"] = []interface{}{rec.ScID, obj.ScID}
	}
	if rec.ScIdx != obj.ScIdx {
		diff["ScIdx"] = []interface{}{rec.ScIdx, obj.ScIdx}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ScInt, obj.ScInt, opts...) {
		diff["ScInt."+diffKey] = diffValue
	}
	if rec.Status != obj.Status {
		diff["Status"] = []interface{}{rec.Status, obj.Status}
	}
	if rec.StatusReason != obj.StatusReason {
		diff["StatusReason"] = []interface{}{rec.StatusReason, obj.StatusReason}
	}
	if rec.StrictMode != obj.StrictMode {
		diff["StrictMode"] = []interface{}{rec.StrictMode, obj.StrictMode}
	}
	if rec.Type != obj.Type {
		diff["Type"] = []interface{}{rec.Type, obj.Type}
	}
	if rec.VarExpr != obj.VarExpr {
		diff["VarExpr"] = []interface{}{rec.VarExpr, obj.VarExpr}
	}
	if rec.VarFormat != obj.VarFormat {
		diff["VarFormat"] = []interface{}{rec.VarFormat, obj.VarFormat}
	}
	if rec.VarName != obj.VarName {
		diff["VarName"] = []interface{}{rec.VarName, obj.VarName}
	}
	if rec.VarScope != obj.VarScope {
		diff["VarScope"] = []interface{}{rec.VarScope, obj.VarScope}
	}
	return diff
}
