// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Opennebula OpenNebula server
//
// OpenNebula server configuration
// Example: {"enabled":true,"id":"0","retry_timeout":10,"rpcEndpoint":"http://localhost:2633/RPC2"}
//
// swagger:model opennebula
type Opennebula struct {

	// OpenNebula cluster ID
	// Pattern: ^[^\s]+$
	Cluster string `json:"cluster,omitempty"`

	// Name of the defaults section to be used in backends created by this service
	Defaults string `json:"defaults,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// Defines the health check conditions required for each node to be considered valid for the service.
	//   none: all nodes are considered valid
	//   any: a node is considered valid if any one health check is 'passing'
	//   all: a node is considered valid if all health checks are 'passing'
	//   min: a node is considered valid if the number of 'passing' checks is greater or equal to the 'health_check_policy_min' value.
	//     If the node has less health checks configured then 'health_check_policy_min' it is considered invalid.
	// Enum: [none any all min]
	HealthCheckPolicy *string `json:"health_check_policy,omitempty"`

	// health check policy min
	HealthCheckPolicyMin int64 `json:"health_check_policy_min,omitempty"`

	// Auto generated ID.
	// Pattern: ^[^\s]+$
	ID *string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// Password for authentication
	// Pattern: ^[^\s]+$
	Password string `json:"password,omitempty"`

	// Duration in seconds in-between data pulling requests to the OpenNebula server
	// Required: true
	// Minimum: 1
	RetryTimeout *int64 `json:"retry_timeout"`

	// RPC endpoint for OpenNebula server
	// Required: true
	// Pattern: ^[^\s]+$
	RPCEndpoint *string `json:"rpcEndpoint"`

	// server slots base
	ServerSlotsBase *int64 `json:"server_slots_base,omitempty"`

	// server slots growth increment
	ServerSlotsGrowthIncrement int64 `json:"server_slots_growth_increment,omitempty"`

	// server slots growth type
	// Enum: [linear exponential]
	ServerSlotsGrowthType *string `json:"server_slots_growth_type,omitempty"`

	// Blacklist of services to exclude
	ServiceBlacklist []string `json:"service-blacklist,omitempty"`

	// Whitelist of services to include
	ServiceWhitelist []string `json:"service-whitelist,omitempty"`

	// Regular expression used to filter services by name.
	ServiceNameRegexp string `json:"service_name_regexp,omitempty"`

	// Username for authentication
	// Pattern: ^[^\s]+$
	User string `json:"user,omitempty"`
}

// Validate validates this opennebula
func (m *Opennebula) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthCheckPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetryTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRPCEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerSlotsGrowthType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceBlacklist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceWhitelist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Opennebula) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if err := validate.Pattern("cluster", "body", m.Cluster, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *Opennebula) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

var opennebulaTypeHealthCheckPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","any","all","min"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		opennebulaTypeHealthCheckPolicyPropEnum = append(opennebulaTypeHealthCheckPolicyPropEnum, v)
	}
}

const (

	// OpennebulaHealthCheckPolicyNone captures enum value "none"
	OpennebulaHealthCheckPolicyNone string = "none"

	// OpennebulaHealthCheckPolicyAny captures enum value "any"
	OpennebulaHealthCheckPolicyAny string = "any"

	// OpennebulaHealthCheckPolicyAll captures enum value "all"
	OpennebulaHealthCheckPolicyAll string = "all"

	// OpennebulaHealthCheckPolicyMin captures enum value "min"
	OpennebulaHealthCheckPolicyMin string = "min"
)

// prop value enum
func (m *Opennebula) validateHealthCheckPolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, opennebulaTypeHealthCheckPolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Opennebula) validateHealthCheckPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthCheckPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateHealthCheckPolicyEnum("health_check_policy", "body", *m.HealthCheckPolicy); err != nil {
		return err
	}

	return nil
}

func (m *Opennebula) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", *m.ID, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *Opennebula) validatePassword(formats strfmt.Registry) error {
	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if err := validate.Pattern("password", "body", m.Password, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *Opennebula) validateRetryTimeout(formats strfmt.Registry) error {

	if err := validate.Required("retry_timeout", "body", m.RetryTimeout); err != nil {
		return err
	}

	if err := validate.MinimumInt("retry_timeout", "body", *m.RetryTimeout, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Opennebula) validateRPCEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("rpcEndpoint", "body", m.RPCEndpoint); err != nil {
		return err
	}

	if err := validate.Pattern("rpcEndpoint", "body", *m.RPCEndpoint, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

var opennebulaTypeServerSlotsGrowthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["linear","exponential"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		opennebulaTypeServerSlotsGrowthTypePropEnum = append(opennebulaTypeServerSlotsGrowthTypePropEnum, v)
	}
}

const (

	// OpennebulaServerSlotsGrowthTypeLinear captures enum value "linear"
	OpennebulaServerSlotsGrowthTypeLinear string = "linear"

	// OpennebulaServerSlotsGrowthTypeExponential captures enum value "exponential"
	OpennebulaServerSlotsGrowthTypeExponential string = "exponential"
)

// prop value enum
func (m *Opennebula) validateServerSlotsGrowthTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, opennebulaTypeServerSlotsGrowthTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Opennebula) validateServerSlotsGrowthType(formats strfmt.Registry) error {
	if swag.IsZero(m.ServerSlotsGrowthType) { // not required
		return nil
	}

	// value enum
	if err := m.validateServerSlotsGrowthTypeEnum("server_slots_growth_type", "body", *m.ServerSlotsGrowthType); err != nil {
		return err
	}

	return nil
}

func (m *Opennebula) validateServiceBlacklist(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceBlacklist) { // not required
		return nil
	}

	for i := 0; i < len(m.ServiceBlacklist); i++ {

		if err := validate.Pattern("service-blacklist"+"."+strconv.Itoa(i), "body", m.ServiceBlacklist[i], `^[^\s]+$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *Opennebula) validateServiceWhitelist(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceWhitelist) { // not required
		return nil
	}

	for i := 0; i < len(m.ServiceWhitelist); i++ {

		if err := validate.Pattern("service-whitelist"+"."+strconv.Itoa(i), "body", m.ServiceWhitelist[i], `^[^\s]+$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *Opennebula) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if err := validate.Pattern("user", "body", m.User, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this opennebula based on context it is used
func (m *Opennebula) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Opennebula) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Opennebula) UnmarshalBinary(b []byte) error {
	var res Opennebula
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
