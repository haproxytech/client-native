// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"github.com/haproxytech/go-method-gen/pkg/eqdiff"
)

func (rec TCPRequestRule) Diff(obj TCPRequestRule, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if rec.Action != obj.Action {
		diff["Action"] = []interface{}{rec.Action, obj.Action}
	}
	if rec.BandwidthLimitLimit != obj.BandwidthLimitLimit {
		diff["BandwidthLimitLimit"] = []interface{}{rec.BandwidthLimitLimit, obj.BandwidthLimitLimit}
	}
	if rec.BandwidthLimitName != obj.BandwidthLimitName {
		diff["BandwidthLimitName"] = []interface{}{rec.BandwidthLimitName, obj.BandwidthLimitName}
	}
	if rec.BandwidthLimitPeriod != obj.BandwidthLimitPeriod {
		diff["BandwidthLimitPeriod"] = []interface{}{rec.BandwidthLimitPeriod, obj.BandwidthLimitPeriod}
	}
	if rec.CaptureLen != obj.CaptureLen {
		diff["CaptureLen"] = []interface{}{rec.CaptureLen, obj.CaptureLen}
	}
	if rec.CaptureSample != obj.CaptureSample {
		diff["CaptureSample"] = []interface{}{rec.CaptureSample, obj.CaptureSample}
	}
	if rec.Cond != obj.Cond {
		diff["Cond"] = []interface{}{rec.Cond, obj.Cond}
	}
	if rec.CondTest != obj.CondTest {
		diff["CondTest"] = []interface{}{rec.CondTest, obj.CondTest}
	}
	if rec.Expr != obj.Expr {
		diff["Expr"] = []interface{}{rec.Expr, obj.Expr}
	}
	if rec.GptValue != obj.GptValue {
		diff["GptValue"] = []interface{}{rec.GptValue, obj.GptValue}
	}
	if rec.LogLevel != obj.LogLevel {
		diff["LogLevel"] = []interface{}{rec.LogLevel, obj.LogLevel}
	}
	if rec.LuaAction != obj.LuaAction {
		diff["LuaAction"] = []interface{}{rec.LuaAction, obj.LuaAction}
	}
	if rec.LuaParams != obj.LuaParams {
		diff["LuaParams"] = []interface{}{rec.LuaParams, obj.LuaParams}
	}
	if rec.MarkValue != obj.MarkValue {
		diff["MarkValue"] = []interface{}{rec.MarkValue, obj.MarkValue}
	}
	if rec.NiceValue != obj.NiceValue {
		diff["NiceValue"] = []interface{}{rec.NiceValue, obj.NiceValue}
	}
	if rec.ResolveProtocol != obj.ResolveProtocol {
		diff["ResolveProtocol"] = []interface{}{rec.ResolveProtocol, obj.ResolveProtocol}
	}
	if rec.ResolveResolvers != obj.ResolveResolvers {
		diff["ResolveResolvers"] = []interface{}{rec.ResolveResolvers, obj.ResolveResolvers}
	}
	if rec.ResolveVar != obj.ResolveVar {
		diff["ResolveVar"] = []interface{}{rec.ResolveVar, obj.ResolveVar}
	}
	if rec.RstTTL != obj.RstTTL {
		diff["RstTTL"] = []interface{}{rec.RstTTL, obj.RstTTL}
	}
	if rec.ScIdx != obj.ScIdx {
		diff["ScIdx"] = []interface{}{rec.ScIdx, obj.ScIdx}
	}
	if rec.ScIncID != obj.ScIncID {
		diff["ScIncID"] = []interface{}{rec.ScIncID, obj.ScIncID}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ScInt, obj.ScInt, opts...) {
		diff["ScInt."+diffKey] = diffValue
	}
	if rec.ServerName != obj.ServerName {
		diff["ServerName"] = []interface{}{rec.ServerName, obj.ServerName}
	}
	if rec.ServiceName != obj.ServiceName {
		diff["ServiceName"] = []interface{}{rec.ServiceName, obj.ServiceName}
	}
	if rec.SpoeEngineName != obj.SpoeEngineName {
		diff["SpoeEngineName"] = []interface{}{rec.SpoeEngineName, obj.SpoeEngineName}
	}
	if rec.SpoeGroupName != obj.SpoeGroupName {
		diff["SpoeGroupName"] = []interface{}{rec.SpoeGroupName, obj.SpoeGroupName}
	}
	if rec.SwitchModeProto != obj.SwitchModeProto {
		diff["SwitchModeProto"] = []interface{}{rec.SwitchModeProto, obj.SwitchModeProto}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Timeout, obj.Timeout, opts...) {
		diff["Timeout."+diffKey] = diffValue
	}
	if rec.TosValue != obj.TosValue {
		diff["TosValue"] = []interface{}{rec.TosValue, obj.TosValue}
	}
	if rec.TrackKey != obj.TrackKey {
		diff["TrackKey"] = []interface{}{rec.TrackKey, obj.TrackKey}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.TrackStickCounter, obj.TrackStickCounter, opts...) {
		diff["TrackStickCounter."+diffKey] = diffValue
	}
	if rec.TrackTable != obj.TrackTable {
		diff["TrackTable"] = []interface{}{rec.TrackTable, obj.TrackTable}
	}
	if rec.Type != obj.Type {
		diff["Type"] = []interface{}{rec.Type, obj.Type}
	}
	if rec.VarFormat != obj.VarFormat {
		diff["VarFormat"] = []interface{}{rec.VarFormat, obj.VarFormat}
	}
	if rec.VarName != obj.VarName {
		diff["VarName"] = []interface{}{rec.VarName, obj.VarName}
	}
	if rec.VarScope != obj.VarScope {
		diff["VarScope"] = []interface{}{rec.VarScope, obj.VarScope}
	}
	return diff
}
