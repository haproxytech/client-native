// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"github.com/haproxytech/client-native/v6/models/funcs"
)

func (rec ProcessInfoItem) Diff(obj ProcessInfoItem) map[string][]interface{} {
	diff := make(map[string][]interface{})
	for diffKey, diffValue := range DiffPointerInt64(rec.ActivePeers, obj.ActivePeers) {
		diff["ActivePeers."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.BusyPolling, obj.BusyPolling) {
		diff["BusyPolling."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.BytesOutRate, obj.BytesOutRate) {
		diff["BytesOutRate."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CompressBpsIn, obj.CompressBpsIn) {
		diff["CompressBpsIn."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CompressBpsOut, obj.CompressBpsOut) {
		diff["CompressBpsOut."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CompressBpsRateLim, obj.CompressBpsRateLim) {
		diff["CompressBpsRateLim."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ConnRate, obj.ConnRate) {
		diff["ConnRate."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ConnRateLimit, obj.ConnRateLimit) {
		diff["ConnRateLimit."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ConnectedPeers, obj.ConnectedPeers) {
		diff["ConnectedPeers."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CumConns, obj.CumConns) {
		diff["CumConns."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CumReq, obj.CumReq) {
		diff["CumReq."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CumSslConns, obj.CumSslConns) {
		diff["CumSslConns."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CurrConns, obj.CurrConns) {
		diff["CurrConns."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CurrSslConns, obj.CurrSslConns) {
		diff["CurrSslConns."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.DroppedLogs, obj.DroppedLogs) {
		diff["DroppedLogs."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.FailedResolutions, obj.FailedResolutions) {
		diff["FailedResolutions."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.HardMaxConn, obj.HardMaxConn) {
		diff["HardMaxConn."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.IdlePct, obj.IdlePct) {
		diff["IdlePct."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Jobs, obj.Jobs) {
		diff["Jobs."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Listeners, obj.Listeners) {
		diff["Listeners."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.MaxConn, obj.MaxConn) {
		diff["MaxConn."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.MaxConnRate, obj.MaxConnRate) {
		diff["MaxConnRate."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.MaxPipes, obj.MaxPipes) {
		diff["MaxPipes."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.MaxSessRate, obj.MaxSessRate) {
		diff["MaxSessRate."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.MaxSock, obj.MaxSock) {
		diff["MaxSock."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.MaxSslConns, obj.MaxSslConns) {
		diff["MaxSslConns."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.MaxSslRate, obj.MaxSslRate) {
		diff["MaxSslRate."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.MaxZlibMemUsage, obj.MaxZlibMemUsage) {
		diff["MaxZlibMemUsage."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.MemMaxMb, obj.MemMaxMb) {
		diff["MemMaxMb."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Nbthread, obj.Nbthread) {
		diff["Nbthread."+diffKey] = diffValue
	}
	if rec.Node != obj.Node {
		diff["Node"] = []interface{}{rec.Node, obj.Node}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Pid, obj.Pid) {
		diff["Pid."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.PipesFree, obj.PipesFree) {
		diff["PipesFree."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.PipesUsed, obj.PipesUsed) {
		diff["PipesUsed."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.PoolAllocMb, obj.PoolAllocMb) {
		diff["PoolAllocMb."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.PoolFailed, obj.PoolFailed) {
		diff["PoolFailed."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.PoolUsedMb, obj.PoolUsedMb) {
		diff["PoolUsedMb."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ProcessNum, obj.ProcessNum) {
		diff["ProcessNum."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Processes, obj.Processes) {
		diff["Processes."+diffKey] = diffValue
	}
	for diffKey, diffValue := range funcs.DiffStrfmtDate(rec.ReleaseDate, obj.ReleaseDate) {
		diff["ReleaseDate."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.RunQueue, obj.RunQueue) {
		diff["RunQueue."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.SessRate, obj.SessRate) {
		diff["SessRate."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.SessRateLimit, obj.SessRateLimit) {
		diff["SessRateLimit."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.SslBackendKeyRate, obj.SslBackendKeyRate) {
		diff["SslBackendKeyRate."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.SslBackendMaxKeyRate, obj.SslBackendMaxKeyRate) {
		diff["SslBackendMaxKeyRate."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.SslCacheLookups, obj.SslCacheLookups) {
		diff["SslCacheLookups."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.SslCacheMisses, obj.SslCacheMisses) {
		diff["SslCacheMisses."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.SslFrontendKeyRate, obj.SslFrontendKeyRate) {
		diff["SslFrontendKeyRate."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.SslFrontendMaxKeyRate, obj.SslFrontendMaxKeyRate) {
		diff["SslFrontendMaxKeyRate."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.SslFrontendSessionReuse, obj.SslFrontendSessionReuse) {
		diff["SslFrontendSessionReuse."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.SslRate, obj.SslRate) {
		diff["SslRate."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.SslRateLimit, obj.SslRateLimit) {
		diff["SslRateLimit."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Stopping, obj.Stopping) {
		diff["Stopping."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Tasks, obj.Tasks) {
		diff["Tasks."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.TotalBytesOut, obj.TotalBytesOut) {
		diff["TotalBytesOut."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Ulimitn, obj.Ulimitn) {
		diff["Ulimitn."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Unstoppable, obj.Unstoppable) {
		diff["Unstoppable."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Uptime, obj.Uptime) {
		diff["Uptime."+diffKey] = diffValue
	}
	if rec.Version != obj.Version {
		diff["Version"] = []interface{}{rec.Version, obj.Version}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ZlibMemUsage, obj.ZlibMemUsage) {
		diff["ZlibMemUsage."+diffKey] = diffValue
	}
	return diff
}
