// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"fmt"

	"github.com/haproxytech/go-method-gen/pkg/eqdiff"
)

func (rec ClusterSettingsCluster) Diff(obj ClusterSettingsCluster, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	for diffKey, diffValue := range DiffSlicePointerClusterLogTarget(rec.ClusterLogTargets, obj.ClusterLogTargets, opts...) {
		diff["ClusterLogTargets"+diffKey] = diffValue
	}
	if rec.Address != obj.Address {
		diff["Address"] = []interface{}{rec.Address, obj.Address}
	}
	if rec.APIBasePath != obj.APIBasePath {
		diff["APIBasePath"] = []interface{}{rec.APIBasePath, obj.APIBasePath}
	}
	if rec.ClusterID != obj.ClusterID {
		diff["ClusterID"] = []interface{}{rec.ClusterID, obj.ClusterID}
	}
	if rec.Description != obj.Description {
		diff["Description"] = []interface{}{rec.Description, obj.Description}
	}
	if rec.Name != obj.Name {
		diff["Name"] = []interface{}{rec.Name, obj.Name}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Port, obj.Port, opts...) {
		diff["Port."+diffKey] = diffValue
	}
	return diff
}

func DiffPointerClusterLogTarget(x, y *ClusterLogTarget, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "*ClusterLogTarget"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffSlicePointerClusterLogTarget(x, y []*ClusterLogTarget, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	var opt *eqdiff.GoMethodGenOptions
	if len(opts) > 0 {
		opt = &opts[0]
	}

	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}
	if opt == nil || (opt != nil && !opt.TreatNilNotAsEmpty) {
		if (x == nil && lenY == 0) || (y == nil && lenX == 0) {
			return diff
		}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		for diffKey, diffValue := range DiffPointerClusterLogTarget(vx, vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}
