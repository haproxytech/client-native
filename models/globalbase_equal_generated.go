// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

func EqualPointerEnvironmentOptions(x, y *EnvironmentOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerThreadGroup(x, y *ThreadGroup) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerGlobalHarden(x, y *GlobalHarden) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualSlicePointerHTTPCodes(x, y []*HTTPCodes) bool {
	if len(x) != len(y) {
		return false
	}

	for i, vx := range x {
		vy := y[i]
		if !EqualPointerHTTPCodes(vx, vy) {
			return false
		}
	}

	return true
}

func EqualPointerHTTPCodes(x, y *HTTPCodes) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerOcspUpdateOptions(x, y *OcspUpdateOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualSlicePointerH1CaseAdjust(x, y []*H1CaseAdjust) bool {
	if len(x) != len(y) {
		return false
	}

	for i, vx := range x {
		vy := y[i]
		if !EqualPointerH1CaseAdjust(vx, vy) {
			return false
		}
	}

	return true
}

func EqualPointerLuaOptions(x, y *LuaOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerH1CaseAdjust(x, y *H1CaseAdjust) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualSlicePointerRuntimeAPI(x, y []*RuntimeAPI) bool {
	if len(x) != len(y) {
		return false
	}

	for i, vx := range x {
		vy := y[i]
		if !EqualPointerRuntimeAPI(vx, vy) {
			return false
		}
	}

	return true
}

func EqualPointerTuneBufferOptions(x, y *TuneBufferOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerTuneLuaOptions(x, y *TuneLuaOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualSlicePointerCPUMap(x, y []*CPUMap) bool {
	if len(x) != len(y) {
		return false
	}

	for i, vx := range x {
		vy := y[i]
		if !EqualPointerCPUMap(vx, vy) {
			return false
		}
	}

	return true
}

func EqualSlicePointerSetVarFmt(x, y []*SetVarFmt) bool {
	if len(x) != len(y) {
		return false
	}

	for i, vx := range x {
		vy := y[i]
		if !EqualPointerSetVarFmt(vx, vy) {
			return false
		}
	}

	return true
}

func EqualPointerDebugOptions(x, y *DebugOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerSslOptions(x, y *SslOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerTuneVarsOptions(x, y *TuneVarsOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerSetVarFmt(x, y *SetVarFmt) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerSetVar(x, y *SetVar) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerHTTPClientOptions(x, y *HTTPClientOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerTuneQuicOptions(x, y *TuneQuicOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerTuneZlibOptions(x, y *TuneZlibOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualSlicePointerCPUSet(x, y []*CPUSet) bool {
	if len(x) != len(y) {
		return false
	}

	for i, vx := range x {
		vy := y[i]
		if !EqualPointerCPUSet(vx, vy) {
			return false
		}
	}

	return true
}

func EqualPointerCPUSet(x, y *CPUSet) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerRuntimeAPI(x, y *RuntimeAPI) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerGlobalDefaultPath(x, y *GlobalDefaultPath) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerFiftyOneDegreesOptions(x, y *FiftyOneDegreesOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerGlobalLogSendHostname(x, y *GlobalLogSendHostname) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerPerformanceOptions(x, y *PerformanceOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerTuneSslOptions(x, y *TuneSslOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerTuneOptions(x, y *TuneOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualPointerWurflOptions(x, y *WurflOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func (rec GlobalBase) Equal(obj GlobalBase) bool {
	return EqualSlicePointerCPUMap(rec.CPUMaps, obj.CPUMaps) &&
		EqualSlicePointerCPUSet(rec.CPUSets, obj.CPUSets) &&
		EqualSlicePointerH1CaseAdjust(rec.H1CaseAdjusts, obj.H1CaseAdjusts) &&
		EqualSlicePointerRuntimeAPI(rec.RuntimeAPIs, obj.RuntimeAPIs) &&
		EqualSlicePointerSetVarFmt(rec.SetVarFmts, obj.SetVarFmts) &&
		EqualSlicePointerSetVar(rec.SetVars, obj.SetVars) &&
		EqualSlicePointerThreadGroup(rec.ThreadGroupLines, obj.ThreadGroupLines) &&
		rec.Chroot == obj.Chroot &&
		EqualPointerInt64(rec.CloseSpreadTime, obj.CloseSpreadTime) &&
		rec.ClusterSecret == obj.ClusterSecret &&
		rec.CPUPolicy == obj.CPUPolicy &&
		rec.Daemon == obj.Daemon &&
		EqualPointerDebugOptions(rec.DebugOptions, obj.DebugOptions) &&
		EqualPointerGlobalDefaultPath(rec.DefaultPath, obj.DefaultPath) &&
		rec.Description == obj.Description &&
		EqualPointerDeviceAtlasOptions(rec.DeviceAtlasOptions, obj.DeviceAtlasOptions) &&
		rec.DNSAcceptFamily == obj.DNSAcceptFamily &&
		EqualPointerEnvironmentOptions(rec.EnvironmentOptions, obj.EnvironmentOptions) &&
		rec.ExposeDeprecatedDirectives == obj.ExposeDeprecatedDirectives &&
		rec.ExposeExperimentalDirectives == obj.ExposeExperimentalDirectives &&
		rec.ExternalCheck == obj.ExternalCheck &&
		EqualPointerFiftyOneDegreesOptions(rec.FiftyOneDegreesOptions, obj.FiftyOneDegreesOptions) &&
		EqualPointerInt64(rec.ForceCfgParserPause, obj.ForceCfgParserPause) &&
		rec.Gid == obj.Gid &&
		EqualPointerInt64(rec.Grace, obj.Grace) &&
		rec.Group == obj.Group &&
		rec.H1AcceptPayloadWithAnyMethod == obj.H1AcceptPayloadWithAnyMethod &&
		rec.H1CaseAdjustFile == obj.H1CaseAdjustFile &&
		rec.H1DoNotCloseOnInsecureTransferEncoding == obj.H1DoNotCloseOnInsecureTransferEncoding &&
		rec.H2WorkaroundBogusWebsocketClients == obj.H2WorkaroundBogusWebsocketClients &&
		EqualPointerInt64(rec.HardStopAfter, obj.HardStopAfter) &&
		EqualPointerGlobalHarden(rec.Harden, obj.Harden) &&
		EqualPointerHTTPClientOptions(rec.HTTPClientOptions, obj.HTTPClientOptions) &&
		EqualSlicePointerHTTPCodes(rec.HTTPErrCodes, obj.HTTPErrCodes) &&
		EqualSlicePointerHTTPCodes(rec.HTTPFailCodes, obj.HTTPFailCodes) &&
		rec.InsecureForkWanted == obj.InsecureForkWanted &&
		rec.InsecureSetuidWanted == obj.InsecureSetuidWanted &&
		rec.LimitedQuic == obj.LimitedQuic &&
		rec.Localpeer == obj.Localpeer &&
		EqualPointerGlobalLogSendHostname(rec.LogSendHostname, obj.LogSendHostname) &&
		EqualPointerLuaOptions(rec.LuaOptions, obj.LuaOptions) &&
		rec.MasterWorker == obj.MasterWorker &&
		EqualPointerInt64(rec.MworkerMaxReloads, obj.MworkerMaxReloads) &&
		rec.Nbthread == obj.Nbthread &&
		rec.NoQuic == obj.NoQuic &&
		rec.Node == obj.Node &&
		rec.NumaCPUMapping == obj.NumaCPUMapping &&
		EqualPointerOcspUpdateOptions(rec.OcspUpdateOptions, obj.OcspUpdateOptions) &&
		EqualPointerPerformanceOptions(rec.PerformanceOptions, obj.PerformanceOptions) &&
		rec.Pidfile == obj.Pidfile &&
		rec.Pp2NeverSendLocal == obj.Pp2NeverSendLocal &&
		rec.PreallocFd == obj.PreallocFd &&
		rec.SetDumpable == obj.SetDumpable &&
		rec.Setcap == obj.Setcap &&
		EqualPointerSslOptions(rec.SslOptions, obj.SslOptions) &&
		rec.StatsFile == obj.StatsFile &&
		EqualPointerInt64(rec.StatsMaxconn, obj.StatsMaxconn) &&
		EqualPointerInt64(rec.StatsTimeout, obj.StatsTimeout) &&
		rec.StrictLimits == obj.StrictLimits &&
		rec.ThreadGroups == obj.ThreadGroups &&
		EqualPointerTuneBufferOptions(rec.TuneBufferOptions, obj.TuneBufferOptions) &&
		EqualPointerTuneLuaOptions(rec.TuneLuaOptions, obj.TuneLuaOptions) &&
		EqualPointerTuneOptions(rec.TuneOptions, obj.TuneOptions) &&
		EqualPointerTuneQuicOptions(rec.TuneQuicOptions, obj.TuneQuicOptions) &&
		EqualPointerTuneSslOptions(rec.TuneSslOptions, obj.TuneSslOptions) &&
		EqualPointerTuneVarsOptions(rec.TuneVarsOptions, obj.TuneVarsOptions) &&
		EqualPointerTuneZlibOptions(rec.TuneZlibOptions, obj.TuneZlibOptions) &&
		rec.UID == obj.UID &&
		rec.Ulimitn == obj.Ulimitn &&
		rec.User == obj.User &&
		EqualPointerInt64(rec.WarnBlockedTrafficAfter, obj.WarnBlockedTrafficAfter) &&
		EqualPointerWurflOptions(rec.WurflOptions, obj.WurflOptions)
}

func EqualPointerCPUMap(x, y *CPUMap) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}

func EqualSlicePointerSetVar(x, y []*SetVar) bool {
	if len(x) != len(y) {
		return false
	}

	for i, vx := range x {
		vy := y[i]
		if !EqualPointerSetVar(vx, vy) {
			return false
		}
	}

	return true
}

func EqualSlicePointerThreadGroup(x, y []*ThreadGroup) bool {
	if len(x) != len(y) {
		return false
	}

	for i, vx := range x {
		vy := y[i]
		if !EqualPointerThreadGroup(vx, vy) {
			return false
		}
	}

	return true
}

func EqualPointerDeviceAtlasOptions(x, y *DeviceAtlasOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y)
}
