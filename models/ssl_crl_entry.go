// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SslCrlEntry One CRL Entry
//
// A certificate revocation list entry.
//
// swagger:model ssl_crl_entry
type SslCrlEntry struct {

	// issuer
	Issuer string `json:"issuer,omitempty"`

	// last update
	// Format: date
	// +kubebuilder:validation:Format=date
	LastUpdate strfmt.Date `json:"last_update,omitempty"`

	// next update
	// Format: date
	// +kubebuilder:validation:Format=date
	NextUpdate strfmt.Date `json:"next_update,omitempty"`

	// revoked certificates
	RevokedCertificates []*RevokedCertificates `json:"revoked_certificates,omitempty"`

	// signature algorithm
	SignatureAlgorithm string `json:"signature_algorithm,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// storage name
	StorageName string `json:"storage_name,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this ssl crl entry
func (m *SslCrlEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevokedCertificates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SslCrlEntry) validateLastUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdate) { // not required
		return nil
	}

	if err := validate.FormatOf("last_update", "body", "date", m.LastUpdate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SslCrlEntry) validateNextUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.NextUpdate) { // not required
		return nil
	}

	if err := validate.FormatOf("next_update", "body", "date", m.NextUpdate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SslCrlEntry) validateRevokedCertificates(formats strfmt.Registry) error {
	if swag.IsZero(m.RevokedCertificates) { // not required
		return nil
	}

	for i := 0; i < len(m.RevokedCertificates); i++ {
		if swag.IsZero(m.RevokedCertificates[i]) { // not required
			continue
		}

		if m.RevokedCertificates[i] != nil {
			if err := m.RevokedCertificates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("revoked_certificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("revoked_certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this ssl crl entry based on the context it is used
func (m *SslCrlEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRevokedCertificates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SslCrlEntry) contextValidateRevokedCertificates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RevokedCertificates); i++ {

		if m.RevokedCertificates[i] != nil {
			if err := m.RevokedCertificates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("revoked_certificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("revoked_certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SslCrlEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SslCrlEntry) UnmarshalBinary(b []byte) error {
	var res SslCrlEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RevokedCertificates revoked certificates
//
// swagger:model RevokedCertificates
type RevokedCertificates struct {
	// revocation date
	// Format: date
	// +kubebuilder:validation:Format=date
	RevocationDate strfmt.Date `json:"revocation_date,omitempty"`

	// serial number
	SerialNumber string `json:"serial_number,omitempty"`
}

// Validate validates this revoked certificates
func (m *RevokedCertificates) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRevocationDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RevokedCertificates) validateRevocationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RevocationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("revocation_date", "body", "date", m.RevocationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this revoked certificates based on context it is used
func (m *RevokedCertificates) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RevokedCertificates) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RevokedCertificates) UnmarshalBinary(b []byte) error {
	var res RevokedCertificates
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
