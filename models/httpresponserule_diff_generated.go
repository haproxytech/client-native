// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"github.com/haproxytech/go-method-gen/pkg/eqdiff"
)

func (rec HTTPResponseRule) Diff(obj HTTPResponseRule, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	for diffKey, diffValue := range DiffSlicePointerReturnHeader(rec.ReturnHeaders, obj.ReturnHeaders, opts...) {
		diff["ReturnHeaders"+diffKey] = diffValue
	}
	if rec.ACLFile != obj.ACLFile {
		diff["ACLFile"] = []interface{}{rec.ACLFile, obj.ACLFile}
	}
	if rec.ACLKeyfmt != obj.ACLKeyfmt {
		diff["ACLKeyfmt"] = []interface{}{rec.ACLKeyfmt, obj.ACLKeyfmt}
	}
	if rec.BandwidthLimitLimit != obj.BandwidthLimitLimit {
		diff["BandwidthLimitLimit"] = []interface{}{rec.BandwidthLimitLimit, obj.BandwidthLimitLimit}
	}
	if rec.BandwidthLimitName != obj.BandwidthLimitName {
		diff["BandwidthLimitName"] = []interface{}{rec.BandwidthLimitName, obj.BandwidthLimitName}
	}
	if rec.BandwidthLimitPeriod != obj.BandwidthLimitPeriod {
		diff["BandwidthLimitPeriod"] = []interface{}{rec.BandwidthLimitPeriod, obj.BandwidthLimitPeriod}
	}
	if rec.CacheName != obj.CacheName {
		diff["CacheName"] = []interface{}{rec.CacheName, obj.CacheName}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CaptureID, obj.CaptureID, opts...) {
		diff["CaptureID."+diffKey] = diffValue
	}
	if rec.CaptureSample != obj.CaptureSample {
		diff["CaptureSample"] = []interface{}{rec.CaptureSample, obj.CaptureSample}
	}
	if rec.Cond != obj.Cond {
		diff["Cond"] = []interface{}{rec.Cond, obj.Cond}
	}
	if rec.CondTest != obj.CondTest {
		diff["CondTest"] = []interface{}{rec.CondTest, obj.CondTest}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.DenyStatus, obj.DenyStatus, opts...) {
		diff["DenyStatus."+diffKey] = diffValue
	}
	if rec.Expr != obj.Expr {
		diff["Expr"] = []interface{}{rec.Expr, obj.Expr}
	}
	if rec.HdrFormat != obj.HdrFormat {
		diff["HdrFormat"] = []interface{}{rec.HdrFormat, obj.HdrFormat}
	}
	if rec.HdrMatch != obj.HdrMatch {
		diff["HdrMatch"] = []interface{}{rec.HdrMatch, obj.HdrMatch}
	}
	if rec.HdrMethod != obj.HdrMethod {
		diff["HdrMethod"] = []interface{}{rec.HdrMethod, obj.HdrMethod}
	}
	if rec.HdrName != obj.HdrName {
		diff["HdrName"] = []interface{}{rec.HdrName, obj.HdrName}
	}
	if rec.LogLevel != obj.LogLevel {
		diff["LogLevel"] = []interface{}{rec.LogLevel, obj.LogLevel}
	}
	if rec.LuaAction != obj.LuaAction {
		diff["LuaAction"] = []interface{}{rec.LuaAction, obj.LuaAction}
	}
	if rec.LuaParams != obj.LuaParams {
		diff["LuaParams"] = []interface{}{rec.LuaParams, obj.LuaParams}
	}
	if rec.MapFile != obj.MapFile {
		diff["MapFile"] = []interface{}{rec.MapFile, obj.MapFile}
	}
	if rec.MapKeyfmt != obj.MapKeyfmt {
		diff["MapKeyfmt"] = []interface{}{rec.MapKeyfmt, obj.MapKeyfmt}
	}
	if rec.MapValuefmt != obj.MapValuefmt {
		diff["MapValuefmt"] = []interface{}{rec.MapValuefmt, obj.MapValuefmt}
	}
	if rec.MarkValue != obj.MarkValue {
		diff["MarkValue"] = []interface{}{rec.MarkValue, obj.MarkValue}
	}
	if rec.NiceValue != obj.NiceValue {
		diff["NiceValue"] = []interface{}{rec.NiceValue, obj.NiceValue}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.RedirCode, obj.RedirCode, opts...) {
		diff["RedirCode."+diffKey] = diffValue
	}
	if rec.RedirOption != obj.RedirOption {
		diff["RedirOption"] = []interface{}{rec.RedirOption, obj.RedirOption}
	}
	if rec.RedirType != obj.RedirType {
		diff["RedirType"] = []interface{}{rec.RedirType, obj.RedirType}
	}
	if rec.RedirValue != obj.RedirValue {
		diff["RedirValue"] = []interface{}{rec.RedirValue, obj.RedirValue}
	}
	if rec.ReturnContent != obj.ReturnContent {
		diff["ReturnContent"] = []interface{}{rec.ReturnContent, obj.ReturnContent}
	}
	if rec.ReturnContentFormat != obj.ReturnContentFormat {
		diff["ReturnContentFormat"] = []interface{}{rec.ReturnContentFormat, obj.ReturnContentFormat}
	}
	for diffKey, diffValue := range DiffPointerString(rec.ReturnContentType, obj.ReturnContentType, opts...) {
		diff["ReturnContentType."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ReturnStatusCode, obj.ReturnStatusCode, opts...) {
		diff["ReturnStatusCode."+diffKey] = diffValue
	}
	if rec.RstTTL != obj.RstTTL {
		diff["RstTTL"] = []interface{}{rec.RstTTL, obj.RstTTL}
	}
	if rec.ScExpr != obj.ScExpr {
		diff["ScExpr"] = []interface{}{rec.ScExpr, obj.ScExpr}
	}
	if rec.ScID != obj.ScID {
		diff["ScID"] = []interface{}{rec.ScID, obj.ScID}
	}
	if rec.ScIdx != obj.ScIdx {
		diff["ScIdx"] = []interface{}{rec.ScIdx, obj.ScIdx}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ScInt, obj.ScInt, opts...) {
		diff["ScInt."+diffKey] = diffValue
	}
	if rec.SpoeEngine != obj.SpoeEngine {
		diff["SpoeEngine"] = []interface{}{rec.SpoeEngine, obj.SpoeEngine}
	}
	if rec.SpoeGroup != obj.SpoeGroup {
		diff["SpoeGroup"] = []interface{}{rec.SpoeGroup, obj.SpoeGroup}
	}
	if rec.Status != obj.Status {
		diff["Status"] = []interface{}{rec.Status, obj.Status}
	}
	if rec.StatusReason != obj.StatusReason {
		diff["StatusReason"] = []interface{}{rec.StatusReason, obj.StatusReason}
	}
	if rec.StrictMode != obj.StrictMode {
		diff["StrictMode"] = []interface{}{rec.StrictMode, obj.StrictMode}
	}
	if rec.Timeout != obj.Timeout {
		diff["Timeout"] = []interface{}{rec.Timeout, obj.Timeout}
	}
	if rec.TimeoutType != obj.TimeoutType {
		diff["TimeoutType"] = []interface{}{rec.TimeoutType, obj.TimeoutType}
	}
	if rec.TosValue != obj.TosValue {
		diff["TosValue"] = []interface{}{rec.TosValue, obj.TosValue}
	}
	if rec.TrackScKey != obj.TrackScKey {
		diff["TrackScKey"] = []interface{}{rec.TrackScKey, obj.TrackScKey}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.TrackScStickCounter, obj.TrackScStickCounter, opts...) {
		diff["TrackScStickCounter."+diffKey] = diffValue
	}
	if rec.TrackScTable != obj.TrackScTable {
		diff["TrackScTable"] = []interface{}{rec.TrackScTable, obj.TrackScTable}
	}
	if rec.Type != obj.Type {
		diff["Type"] = []interface{}{rec.Type, obj.Type}
	}
	if rec.VarExpr != obj.VarExpr {
		diff["VarExpr"] = []interface{}{rec.VarExpr, obj.VarExpr}
	}
	if rec.VarFormat != obj.VarFormat {
		diff["VarFormat"] = []interface{}{rec.VarFormat, obj.VarFormat}
	}
	if rec.VarName != obj.VarName {
		diff["VarName"] = []interface{}{rec.VarName, obj.VarName}
	}
	if rec.VarScope != obj.VarScope {
		diff["VarScope"] = []interface{}{rec.VarScope, obj.VarScope}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.WaitAtLeast, obj.WaitAtLeast, opts...) {
		diff["WaitAtLeast."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.WaitTime, obj.WaitTime, opts...) {
		diff["WaitTime."+diffKey] = diffValue
	}
	return diff
}
