// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

func (rec NativeStatStats) Diff(obj NativeStatStats) map[string][]interface{} {
	diff := make(map[string][]interface{})
	for diffKey, diffValue := range DiffPointerInt64(rec.Act, obj.Act) {
		diff["Act."+diffKey] = diffValue
	}
	if rec.Addr != obj.Addr {
		diff["Addr"] = []interface{}{rec.Addr, obj.Addr}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.AgentCode, obj.AgentCode) {
		diff["AgentCode."+diffKey] = diffValue
	}
	if rec.AgentDesc != obj.AgentDesc {
		diff["AgentDesc"] = []interface{}{rec.AgentDesc, obj.AgentDesc}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.AgentDuration, obj.AgentDuration) {
		diff["AgentDuration."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.AgentFall, obj.AgentFall) {
		diff["AgentFall."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.AgentHealth, obj.AgentHealth) {
		diff["AgentHealth."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.AgentRise, obj.AgentRise) {
		diff["AgentRise."+diffKey] = diffValue
	}
	if rec.AgentStatus != obj.AgentStatus {
		diff["AgentStatus"] = []interface{}{rec.AgentStatus, obj.AgentStatus}
	}
	if rec.Algo != obj.Algo {
		diff["Algo"] = []interface{}{rec.Algo, obj.Algo}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Bck, obj.Bck) {
		diff["Bck."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Bin, obj.Bin) {
		diff["Bin."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Bout, obj.Bout) {
		diff["Bout."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CheckCode, obj.CheckCode) {
		diff["CheckCode."+diffKey] = diffValue
	}
	if rec.CheckDesc != obj.CheckDesc {
		diff["CheckDesc"] = []interface{}{rec.CheckDesc, obj.CheckDesc}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CheckDuration, obj.CheckDuration) {
		diff["CheckDuration."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CheckFall, obj.CheckFall) {
		diff["CheckFall."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CheckHealth, obj.CheckHealth) {
		diff["CheckHealth."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CheckRise, obj.CheckRise) {
		diff["CheckRise."+diffKey] = diffValue
	}
	if rec.CheckStatus != obj.CheckStatus {
		diff["CheckStatus"] = []interface{}{rec.CheckStatus, obj.CheckStatus}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Chkdown, obj.Chkdown) {
		diff["Chkdown."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Chkfail, obj.Chkfail) {
		diff["Chkfail."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CliAbrt, obj.CliAbrt) {
		diff["CliAbrt."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CompByp, obj.CompByp) {
		diff["CompByp."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CompIn, obj.CompIn) {
		diff["CompIn."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CompOut, obj.CompOut) {
		diff["CompOut."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CompRsp, obj.CompRsp) {
		diff["CompRsp."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ConnRate, obj.ConnRate) {
		diff["ConnRate."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ConnRateMax, obj.ConnRateMax) {
		diff["ConnRateMax."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ConnTot, obj.ConnTot) {
		diff["ConnTot."+diffKey] = diffValue
	}
	if rec.Cookie != obj.Cookie {
		diff["Cookie"] = []interface{}{rec.Cookie, obj.Cookie}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Ctime, obj.Ctime) {
		diff["Ctime."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Dcon, obj.Dcon) {
		diff["Dcon."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Downtime, obj.Downtime) {
		diff["Downtime."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Dreq, obj.Dreq) {
		diff["Dreq."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Dresp, obj.Dresp) {
		diff["Dresp."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Dses, obj.Dses) {
		diff["Dses."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Econ, obj.Econ) {
		diff["Econ."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Ereq, obj.Ereq) {
		diff["Ereq."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Eresp, obj.Eresp) {
		diff["Eresp."+diffKey] = diffValue
	}
	if rec.Hanafail != obj.Hanafail {
		diff["Hanafail"] = []interface{}{rec.Hanafail, obj.Hanafail}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Hrsp1xx, obj.Hrsp1xx) {
		diff["Hrsp1xx."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Hrsp2xx, obj.Hrsp2xx) {
		diff["Hrsp2xx."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Hrsp3xx, obj.Hrsp3xx) {
		diff["Hrsp3xx."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Hrsp4xx, obj.Hrsp4xx) {
		diff["Hrsp4xx."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Hrsp5xx, obj.Hrsp5xx) {
		diff["Hrsp5xx."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.HrspOther, obj.HrspOther) {
		diff["HrspOther."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Iid, obj.Iid) {
		diff["Iid."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Intercepted, obj.Intercepted) {
		diff["Intercepted."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerString(rec.LastAgt, obj.LastAgt) {
		diff["LastAgt."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerString(rec.LastChk, obj.LastChk) {
		diff["LastChk."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Lastchg, obj.Lastchg) {
		diff["Lastchg."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Lastsess, obj.Lastsess) {
		diff["Lastsess."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Lbtot, obj.Lbtot) {
		diff["Lbtot."+diffKey] = diffValue
	}
	if rec.Mode != obj.Mode {
		diff["Mode"] = []interface{}{rec.Mode, obj.Mode}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Pid, obj.Pid) {
		diff["Pid."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Qcur, obj.Qcur) {
		diff["Qcur."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Qlimit, obj.Qlimit) {
		diff["Qlimit."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Qmax, obj.Qmax) {
		diff["Qmax."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Qtime, obj.Qtime) {
		diff["Qtime."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Rate, obj.Rate) {
		diff["Rate."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.RateLim, obj.RateLim) {
		diff["RateLim."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.RateMax, obj.RateMax) {
		diff["RateMax."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ReqRate, obj.ReqRate) {
		diff["ReqRate."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ReqRateMax, obj.ReqRateMax) {
		diff["ReqRateMax."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ReqTot, obj.ReqTot) {
		diff["ReqTot."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Rtime, obj.Rtime) {
		diff["Rtime."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Scur, obj.Scur) {
		diff["Scur."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Sid, obj.Sid) {
		diff["Sid."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Slim, obj.Slim) {
		diff["Slim."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Smax, obj.Smax) {
		diff["Smax."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.SrvAbrt, obj.SrvAbrt) {
		diff["SrvAbrt."+diffKey] = diffValue
	}
	if rec.Status != obj.Status {
		diff["Status"] = []interface{}{rec.Status, obj.Status}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Stot, obj.Stot) {
		diff["Stot."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Throttle, obj.Throttle) {
		diff["Throttle."+diffKey] = diffValue
	}
	if rec.Tracked != obj.Tracked {
		diff["Tracked"] = []interface{}{rec.Tracked, obj.Tracked}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Ttime, obj.Ttime) {
		diff["Ttime."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Weight, obj.Weight) {
		diff["Weight."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Wredis, obj.Wredis) {
		diff["Wredis."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Wretr, obj.Wretr) {
		diff["Wretr."+diffKey] = diffValue
	}
	return diff
}
