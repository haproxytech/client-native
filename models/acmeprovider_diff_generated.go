// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"fmt"

	"github.com/haproxytech/go-method-gen/pkg/eqdiff"
)

func (rec AcmeProvider) Diff(obj AcmeProvider, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if rec.AccountKey != obj.AccountKey {
		diff["AccountKey"] = []interface{}{rec.AccountKey, obj.AccountKey}
	}
	if rec.AcmeProvider != obj.AcmeProvider {
		diff["AcmeProvider"] = []interface{}{rec.AcmeProvider, obj.AcmeProvider}
	}
	for diffKey, diffValue := range DiffMapStringString(rec.AcmeVars, obj.AcmeVars, opts...) {
		diff["AcmeVars"+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Bits, obj.Bits, opts...) {
		diff["Bits."+diffKey] = diffValue
	}
	if rec.Challenge != obj.Challenge {
		diff["Challenge"] = []interface{}{rec.Challenge, obj.Challenge}
	}
	if rec.Contact != obj.Contact {
		diff["Contact"] = []interface{}{rec.Contact, obj.Contact}
	}
	if rec.Curves != obj.Curves {
		diff["Curves"] = []interface{}{rec.Curves, obj.Curves}
	}
	if rec.Directory != obj.Directory {
		diff["Directory"] = []interface{}{rec.Directory, obj.Directory}
	}
	if rec.Keytype != obj.Keytype {
		diff["Keytype"] = []interface{}{rec.Keytype, obj.Keytype}
	}
	if rec.Map != obj.Map {
		diff["Map"] = []interface{}{rec.Map, obj.Map}
	}
	if rec.Name != obj.Name {
		diff["Name"] = []interface{}{rec.Name, obj.Name}
	}
	return diff
}

func DiffMapStringString(x, y map[string]string, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if (x == nil && y == nil) || (len(x) == 0 && len(y) == 0) {
		return diff
	}

	var opt *eqdiff.GoMethodGenOptions
	if len(opts) > 0 {
		opt = &opts[0]
	}

	if opt == nil || (opt != nil && !opt.TreatNilNotAsEmpty) {
		if (x == nil && len(y) == 0) || (y == nil && len(x) == 0) {
			return diff
		}
	}

	if x == nil {
		return map[string][]interface{}{"": {nil, y}}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for kx, vx := range x {
		key := fmt.Sprintf("[%v]", kx)
		vy := y[kx]

		if vx != vy {
			diff[key] = []interface{}{vx, vy}
		}

	}
	for ky, vy := range y {
		key := fmt.Sprintf("[%v]", ky)
		if _, found := diff[key]; found {
			continue
		}

		vx := x[ky]

		if vx != vy {
			diff[key] = []interface{}{vx, vy}
		}

	}
	return diff
}

func DiffPointerInt64(x, y *int64, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "Bits"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	if *x != *y {
		diff[key] = []interface{}{x, y}
	}

	return diff
}
