// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"github.com/haproxytech/go-method-gen/pkg/eqdiff"
)

func (rec LogForward) Equal(obj LogForward, opts ...eqdiff.GoMethodGenOptions) bool {
	return rec.LogForwardBase.Equal(obj.LogForwardBase, opts...) &&
		rec.LogTargetList.Equal(obj.LogTargetList, opts...) &&
		EqualMapStringBind(rec.Binds, obj.Binds, opts...) &&
		EqualMapStringDgramBind(rec.DgramBinds, obj.DgramBinds, opts...)
}

func EqualMapStringDgramBind(x, y map[string]DgramBind, opts ...eqdiff.GoMethodGenOptions) bool {
	var opt *eqdiff.GoMethodGenOptions
	if len(opts) > 0 {
		opt = &opts[0]
	}

	if (x == nil) != (y == nil) {
		if opt == nil || !opt.TreatNilNotAsEmpty {
			if len(x) == 0 && len(y) == 0 {
				return true
			}
		}
		return false
	}

	if len(x) != len(y) {
		return false
	}

	for kx, vx := range x {
		if vy, exists := y[kx]; !exists || !vx.Equal(vy, opts...) {
			return false
		}
	}

	return true
}
