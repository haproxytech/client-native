// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

func (rec InfoSystem) Diff(obj InfoSystem) map[string][]interface{} {
	diff := make(map[string][]interface{})
	for diffKey, diffValue := range DiffPointerInfoSystemCPUInfo(rec.CPUInfo, obj.CPUInfo) {
		diff["CPUInfo."+diffKey] = diffValue
	}
	if rec.Hostname != obj.Hostname {
		diff["Hostname"] = []interface{}{rec.Hostname, obj.Hostname}
	}
	for diffKey, diffValue := range DiffPointerInfoSystemMemInfo(rec.MemInfo, obj.MemInfo) {
		diff["MemInfo."+diffKey] = diffValue
	}
	if rec.OsString != obj.OsString {
		diff["OsString"] = []interface{}{rec.OsString, obj.OsString}
	}
	if rec.Time != obj.Time {
		diff["Time"] = []interface{}{rec.Time, obj.Time}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Uptime, obj.Uptime) {
		diff["Uptime."+diffKey] = diffValue
	}
	return diff
}

func DiffPointerInfoSystemCPUInfo(x, y *InfoSystemCPUInfo) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "CPUInfo"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerInfoSystemMemInfo(x, y *InfoSystemMemInfo) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "MemInfo"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}
