// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

func (rec ServerParams) Diff(obj ServerParams) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if rec.AgentAddr != obj.AgentAddr {
		diff["AgentAddr"] = []interface{}{rec.AgentAddr, obj.AgentAddr}
	}
	if rec.AgentCheck != obj.AgentCheck {
		diff["AgentCheck"] = []interface{}{rec.AgentCheck, obj.AgentCheck}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.AgentInter, obj.AgentInter) {
		diff["AgentInter."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.AgentPort, obj.AgentPort) {
		diff["AgentPort."+diffKey] = diffValue
	}
	if rec.AgentSend != obj.AgentSend {
		diff["AgentSend"] = []interface{}{rec.AgentSend, obj.AgentSend}
	}
	if rec.Allow0rtt != obj.Allow0rtt {
		diff["Allow0rtt"] = []interface{}{rec.Allow0rtt, obj.Allow0rtt}
	}
	if rec.Alpn != obj.Alpn {
		diff["Alpn"] = []interface{}{rec.Alpn, obj.Alpn}
	}
	if rec.Backup != obj.Backup {
		diff["Backup"] = []interface{}{rec.Backup, obj.Backup}
	}
	if rec.Check != obj.Check {
		diff["Check"] = []interface{}{rec.Check, obj.Check}
	}
	if rec.CheckPoolConnName != obj.CheckPoolConnName {
		diff["CheckPoolConnName"] = []interface{}{rec.CheckPoolConnName, obj.CheckPoolConnName}
	}
	if rec.CheckReusePool != obj.CheckReusePool {
		diff["CheckReusePool"] = []interface{}{rec.CheckReusePool, obj.CheckReusePool}
	}
	if rec.CheckSendProxy != obj.CheckSendProxy {
		diff["CheckSendProxy"] = []interface{}{rec.CheckSendProxy, obj.CheckSendProxy}
	}
	if rec.CheckSni != obj.CheckSni {
		diff["CheckSni"] = []interface{}{rec.CheckSni, obj.CheckSni}
	}
	if rec.CheckSsl != obj.CheckSsl {
		diff["CheckSsl"] = []interface{}{rec.CheckSsl, obj.CheckSsl}
	}
	if rec.CheckAlpn != obj.CheckAlpn {
		diff["CheckAlpn"] = []interface{}{rec.CheckAlpn, obj.CheckAlpn}
	}
	if rec.CheckProto != obj.CheckProto {
		diff["CheckProto"] = []interface{}{rec.CheckProto, obj.CheckProto}
	}
	if rec.CheckViaSocks4 != obj.CheckViaSocks4 {
		diff["CheckViaSocks4"] = []interface{}{rec.CheckViaSocks4, obj.CheckViaSocks4}
	}
	if rec.Ciphers != obj.Ciphers {
		diff["Ciphers"] = []interface{}{rec.Ciphers, obj.Ciphers}
	}
	if rec.Ciphersuites != obj.Ciphersuites {
		diff["Ciphersuites"] = []interface{}{rec.Ciphersuites, obj.Ciphersuites}
	}
	if rec.ClientSigalgs != obj.ClientSigalgs {
		diff["ClientSigalgs"] = []interface{}{rec.ClientSigalgs, obj.ClientSigalgs}
	}
	if rec.Cookie != obj.Cookie {
		diff["Cookie"] = []interface{}{rec.Cookie, obj.Cookie}
	}
	if rec.CrlFile != obj.CrlFile {
		diff["CrlFile"] = []interface{}{rec.CrlFile, obj.CrlFile}
	}
	if rec.Curves != obj.Curves {
		diff["Curves"] = []interface{}{rec.Curves, obj.Curves}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Downinter, obj.Downinter) {
		diff["Downinter."+diffKey] = diffValue
	}
	if rec.ErrorLimit != obj.ErrorLimit {
		diff["ErrorLimit"] = []interface{}{rec.ErrorLimit, obj.ErrorLimit}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Fall, obj.Fall) {
		diff["Fall."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Fastinter, obj.Fastinter) {
		diff["Fastinter."+diffKey] = diffValue
	}
	if rec.ForceSslv3 != obj.ForceSslv3 {
		diff["ForceSslv3"] = []interface{}{rec.ForceSslv3, obj.ForceSslv3}
	}
	if rec.ForceTlsv10 != obj.ForceTlsv10 {
		diff["ForceTlsv10"] = []interface{}{rec.ForceTlsv10, obj.ForceTlsv10}
	}
	if rec.ForceTlsv11 != obj.ForceTlsv11 {
		diff["ForceTlsv11"] = []interface{}{rec.ForceTlsv11, obj.ForceTlsv11}
	}
	if rec.ForceTlsv12 != obj.ForceTlsv12 {
		diff["ForceTlsv12"] = []interface{}{rec.ForceTlsv12, obj.ForceTlsv12}
	}
	if rec.ForceTlsv13 != obj.ForceTlsv13 {
		diff["ForceTlsv13"] = []interface{}{rec.ForceTlsv13, obj.ForceTlsv13}
	}
	if rec.GUID != obj.GUID {
		diff["GUID"] = []interface{}{rec.GUID, obj.GUID}
	}
	if rec.HashKey != obj.HashKey {
		diff["HashKey"] = []interface{}{rec.HashKey, obj.HashKey}
	}
	if rec.HealthCheckAddress != obj.HealthCheckAddress {
		diff["HealthCheckAddress"] = []interface{}{rec.HealthCheckAddress, obj.HealthCheckAddress}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.HealthCheckPort, obj.HealthCheckPort) {
		diff["HealthCheckPort."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.IdlePing, obj.IdlePing) {
		diff["IdlePing."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerString(rec.InitAddr, obj.InitAddr) {
		diff["InitAddr."+diffKey] = diffValue
	}
	if rec.InitState != obj.InitState {
		diff["InitState"] = []interface{}{rec.InitState, obj.InitState}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Inter, obj.Inter) {
		diff["Inter."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.LogBufsize, obj.LogBufsize) {
		diff["LogBufsize."+diffKey] = diffValue
	}
	if rec.LogProto != obj.LogProto {
		diff["LogProto"] = []interface{}{rec.LogProto, obj.LogProto}
	}
	if rec.Maintenance != obj.Maintenance {
		diff["Maintenance"] = []interface{}{rec.Maintenance, obj.Maintenance}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.MaxReuse, obj.MaxReuse) {
		diff["MaxReuse."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Maxconn, obj.Maxconn) {
		diff["Maxconn."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Maxqueue, obj.Maxqueue) {
		diff["Maxqueue."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Minconn, obj.Minconn) {
		diff["Minconn."+diffKey] = diffValue
	}
	if rec.Namespace != obj.Namespace {
		diff["Namespace"] = []interface{}{rec.Namespace, obj.Namespace}
	}
	if rec.NoSslv3 != obj.NoSslv3 {
		diff["NoSslv3"] = []interface{}{rec.NoSslv3, obj.NoSslv3}
	}
	if rec.NoTlsv10 != obj.NoTlsv10 {
		diff["NoTlsv10"] = []interface{}{rec.NoTlsv10, obj.NoTlsv10}
	}
	if rec.NoTlsv11 != obj.NoTlsv11 {
		diff["NoTlsv11"] = []interface{}{rec.NoTlsv11, obj.NoTlsv11}
	}
	if rec.NoTlsv12 != obj.NoTlsv12 {
		diff["NoTlsv12"] = []interface{}{rec.NoTlsv12, obj.NoTlsv12}
	}
	if rec.NoTlsv13 != obj.NoTlsv13 {
		diff["NoTlsv13"] = []interface{}{rec.NoTlsv13, obj.NoTlsv13}
	}
	if rec.NoVerifyhost != obj.NoVerifyhost {
		diff["NoVerifyhost"] = []interface{}{rec.NoVerifyhost, obj.NoVerifyhost}
	}
	if rec.Npn != obj.Npn {
		diff["Npn"] = []interface{}{rec.Npn, obj.Npn}
	}
	if rec.Observe != obj.Observe {
		diff["Observe"] = []interface{}{rec.Observe, obj.Observe}
	}
	if rec.OnError != obj.OnError {
		diff["OnError"] = []interface{}{rec.OnError, obj.OnError}
	}
	if rec.OnMarkedDown != obj.OnMarkedDown {
		diff["OnMarkedDown"] = []interface{}{rec.OnMarkedDown, obj.OnMarkedDown}
	}
	if rec.OnMarkedUp != obj.OnMarkedUp {
		diff["OnMarkedUp"] = []interface{}{rec.OnMarkedUp, obj.OnMarkedUp}
	}
	if rec.PoolConnName != obj.PoolConnName {
		diff["PoolConnName"] = []interface{}{rec.PoolConnName, obj.PoolConnName}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.PoolLowConn, obj.PoolLowConn) {
		diff["PoolLowConn."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.PoolMaxConn, obj.PoolMaxConn) {
		diff["PoolMaxConn."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.PoolPurgeDelay, obj.PoolPurgeDelay) {
		diff["PoolPurgeDelay."+diffKey] = diffValue
	}
	if rec.Proto != obj.Proto {
		diff["Proto"] = []interface{}{rec.Proto, obj.Proto}
	}
	for diffKey, diffValue := range DiffSliceString(rec.ProxyV2Options, obj.ProxyV2Options) {
		diff["ProxyV2Options"+diffKey] = diffValue
	}
	if rec.Redir != obj.Redir {
		diff["Redir"] = []interface{}{rec.Redir, obj.Redir}
	}
	if rec.Renegotiate != obj.Renegotiate {
		diff["Renegotiate"] = []interface{}{rec.Renegotiate, obj.Renegotiate}
	}
	if rec.ResolveNet != obj.ResolveNet {
		diff["ResolveNet"] = []interface{}{rec.ResolveNet, obj.ResolveNet}
	}
	if rec.ResolvePrefer != obj.ResolvePrefer {
		diff["ResolvePrefer"] = []interface{}{rec.ResolvePrefer, obj.ResolvePrefer}
	}
	if rec.ResolveOpts != obj.ResolveOpts {
		diff["ResolveOpts"] = []interface{}{rec.ResolveOpts, obj.ResolveOpts}
	}
	if rec.Resolvers != obj.Resolvers {
		diff["Resolvers"] = []interface{}{rec.Resolvers, obj.Resolvers}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Rise, obj.Rise) {
		diff["Rise."+diffKey] = diffValue
	}
	if rec.SendProxy != obj.SendProxy {
		diff["SendProxy"] = []interface{}{rec.SendProxy, obj.SendProxy}
	}
	if rec.SendProxyV2 != obj.SendProxyV2 {
		diff["SendProxyV2"] = []interface{}{rec.SendProxyV2, obj.SendProxyV2}
	}
	if rec.SendProxyV2Ssl != obj.SendProxyV2Ssl {
		diff["SendProxyV2Ssl"] = []interface{}{rec.SendProxyV2Ssl, obj.SendProxyV2Ssl}
	}
	if rec.SendProxyV2SslCn != obj.SendProxyV2SslCn {
		diff["SendProxyV2SslCn"] = []interface{}{rec.SendProxyV2SslCn, obj.SendProxyV2SslCn}
	}
	for diffKey, diffValue := range DiffPointerServerParamsSetProxyV2TlvFmt(rec.SetProxyV2TlvFmt, obj.SetProxyV2TlvFmt) {
		diff["SetProxyV2TlvFmt."+diffKey] = diffValue
	}
	if rec.Shard != obj.Shard {
		diff["Shard"] = []interface{}{rec.Shard, obj.Shard}
	}
	if rec.Sigalgs != obj.Sigalgs {
		diff["Sigalgs"] = []interface{}{rec.Sigalgs, obj.Sigalgs}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Slowstart, obj.Slowstart) {
		diff["Slowstart."+diffKey] = diffValue
	}
	if rec.Sni != obj.Sni {
		diff["Sni"] = []interface{}{rec.Sni, obj.Sni}
	}
	if rec.Socks4 != obj.Socks4 {
		diff["Socks4"] = []interface{}{rec.Socks4, obj.Socks4}
	}
	if rec.Source != obj.Source {
		diff["Source"] = []interface{}{rec.Source, obj.Source}
	}
	if rec.Ssl != obj.Ssl {
		diff["Ssl"] = []interface{}{rec.Ssl, obj.Ssl}
	}
	if rec.SslCafile != obj.SslCafile {
		diff["SslCafile"] = []interface{}{rec.SslCafile, obj.SslCafile}
	}
	if rec.SslCertificate != obj.SslCertificate {
		diff["SslCertificate"] = []interface{}{rec.SslCertificate, obj.SslCertificate}
	}
	if rec.SslMaxVer != obj.SslMaxVer {
		diff["SslMaxVer"] = []interface{}{rec.SslMaxVer, obj.SslMaxVer}
	}
	if rec.SslMinVer != obj.SslMinVer {
		diff["SslMinVer"] = []interface{}{rec.SslMinVer, obj.SslMinVer}
	}
	if rec.SslReuse != obj.SslReuse {
		diff["SslReuse"] = []interface{}{rec.SslReuse, obj.SslReuse}
	}
	if rec.Sslv3 != obj.Sslv3 {
		diff["Sslv3"] = []interface{}{rec.Sslv3, obj.Sslv3}
	}
	if rec.Stick != obj.Stick {
		diff["Stick"] = []interface{}{rec.Stick, obj.Stick}
	}
	if rec.StrictMaxconn != obj.StrictMaxconn {
		diff["StrictMaxconn"] = []interface{}{rec.StrictMaxconn, obj.StrictMaxconn}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.TCPUt, obj.TCPUt) {
		diff["TCPUt."+diffKey] = diffValue
	}
	if rec.Tfo != obj.Tfo {
		diff["Tfo"] = []interface{}{rec.Tfo, obj.Tfo}
	}
	if rec.TLSTickets != obj.TLSTickets {
		diff["TLSTickets"] = []interface{}{rec.TLSTickets, obj.TLSTickets}
	}
	if rec.Tlsv10 != obj.Tlsv10 {
		diff["Tlsv10"] = []interface{}{rec.Tlsv10, obj.Tlsv10}
	}
	if rec.Tlsv11 != obj.Tlsv11 {
		diff["Tlsv11"] = []interface{}{rec.Tlsv11, obj.Tlsv11}
	}
	if rec.Tlsv12 != obj.Tlsv12 {
		diff["Tlsv12"] = []interface{}{rec.Tlsv12, obj.Tlsv12}
	}
	if rec.Tlsv13 != obj.Tlsv13 {
		diff["Tlsv13"] = []interface{}{rec.Tlsv13, obj.Tlsv13}
	}
	if rec.Track != obj.Track {
		diff["Track"] = []interface{}{rec.Track, obj.Track}
	}
	if rec.Verify != obj.Verify {
		diff["Verify"] = []interface{}{rec.Verify, obj.Verify}
	}
	if rec.Verifyhost != obj.Verifyhost {
		diff["Verifyhost"] = []interface{}{rec.Verifyhost, obj.Verifyhost}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Weight, obj.Weight) {
		diff["Weight."+diffKey] = diffValue
	}
	if rec.Ws != obj.Ws {
		diff["Ws"] = []interface{}{rec.Ws, obj.Ws}
	}
	return diff
}

func DiffPointerServerParamsSetProxyV2TlvFmt(x, y *ServerParamsSetProxyV2TlvFmt) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "SetProxyV2TlvFmt"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}
