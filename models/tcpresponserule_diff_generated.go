// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

func (rec TCPResponseRule) Diff(obj TCPResponseRule) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if rec.Action != obj.Action {
		diff["Action"] = []interface{}{rec.Action, obj.Action}
	}
	if rec.BandwidthLimitLimit != obj.BandwidthLimitLimit {
		diff["BandwidthLimitLimit"] = []interface{}{rec.BandwidthLimitLimit, obj.BandwidthLimitLimit}
	}
	if rec.BandwidthLimitName != obj.BandwidthLimitName {
		diff["BandwidthLimitName"] = []interface{}{rec.BandwidthLimitName, obj.BandwidthLimitName}
	}
	if rec.BandwidthLimitPeriod != obj.BandwidthLimitPeriod {
		diff["BandwidthLimitPeriod"] = []interface{}{rec.BandwidthLimitPeriod, obj.BandwidthLimitPeriod}
	}
	if rec.Cond != obj.Cond {
		diff["Cond"] = []interface{}{rec.Cond, obj.Cond}
	}
	if rec.CondTest != obj.CondTest {
		diff["CondTest"] = []interface{}{rec.CondTest, obj.CondTest}
	}
	if rec.Expr != obj.Expr {
		diff["Expr"] = []interface{}{rec.Expr, obj.Expr}
	}
	if rec.LogLevel != obj.LogLevel {
		diff["LogLevel"] = []interface{}{rec.LogLevel, obj.LogLevel}
	}
	if rec.LuaAction != obj.LuaAction {
		diff["LuaAction"] = []interface{}{rec.LuaAction, obj.LuaAction}
	}
	if rec.LuaParams != obj.LuaParams {
		diff["LuaParams"] = []interface{}{rec.LuaParams, obj.LuaParams}
	}
	if rec.MarkValue != obj.MarkValue {
		diff["MarkValue"] = []interface{}{rec.MarkValue, obj.MarkValue}
	}
	if rec.NiceValue != obj.NiceValue {
		diff["NiceValue"] = []interface{}{rec.NiceValue, obj.NiceValue}
	}
	if rec.RstTTL != obj.RstTTL {
		diff["RstTTL"] = []interface{}{rec.RstTTL, obj.RstTTL}
	}
	if rec.ScExpr != obj.ScExpr {
		diff["ScExpr"] = []interface{}{rec.ScExpr, obj.ScExpr}
	}
	if rec.ScID != obj.ScID {
		diff["ScID"] = []interface{}{rec.ScID, obj.ScID}
	}
	if rec.ScIdx != obj.ScIdx {
		diff["ScIdx"] = []interface{}{rec.ScIdx, obj.ScIdx}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ScInt, obj.ScInt) {
		diff["ScInt."+diffKey] = diffValue
	}
	if rec.SpoeEngine != obj.SpoeEngine {
		diff["SpoeEngine"] = []interface{}{rec.SpoeEngine, obj.SpoeEngine}
	}
	if rec.SpoeGroup != obj.SpoeGroup {
		diff["SpoeGroup"] = []interface{}{rec.SpoeGroup, obj.SpoeGroup}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Timeout, obj.Timeout) {
		diff["Timeout."+diffKey] = diffValue
	}
	if rec.TosValue != obj.TosValue {
		diff["TosValue"] = []interface{}{rec.TosValue, obj.TosValue}
	}
	if rec.Type != obj.Type {
		diff["Type"] = []interface{}{rec.Type, obj.Type}
	}
	if rec.VarFormat != obj.VarFormat {
		diff["VarFormat"] = []interface{}{rec.VarFormat, obj.VarFormat}
	}
	if rec.VarName != obj.VarName {
		diff["VarName"] = []interface{}{rec.VarName, obj.VarName}
	}
	if rec.VarScope != obj.VarScope {
		diff["VarScope"] = []interface{}{rec.VarScope, obj.VarScope}
	}
	return diff
}
