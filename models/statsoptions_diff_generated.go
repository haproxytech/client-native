// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"fmt"
)

func (rec StatsOptions) Diff(obj StatsOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if rec.StatsAdmin != obj.StatsAdmin {
		diff["StatsAdmin"] = []interface{}{rec.StatsAdmin, obj.StatsAdmin}
	}
	if rec.StatsAdminCond != obj.StatsAdminCond {
		diff["StatsAdminCond"] = []interface{}{rec.StatsAdminCond, obj.StatsAdminCond}
	}
	if rec.StatsAdminCondTest != obj.StatsAdminCondTest {
		diff["StatsAdminCondTest"] = []interface{}{rec.StatsAdminCondTest, obj.StatsAdminCondTest}
	}
	for diffKey, diffValue := range DiffSlicePointerStatsAuth(rec.StatsAuths, obj.StatsAuths) {
		diff["StatsAuths"+diffKey] = diffValue
	}
	if rec.StatsEnable != obj.StatsEnable {
		diff["StatsEnable"] = []interface{}{rec.StatsEnable, obj.StatsEnable}
	}
	if rec.StatsHideVersion != obj.StatsHideVersion {
		diff["StatsHideVersion"] = []interface{}{rec.StatsHideVersion, obj.StatsHideVersion}
	}
	for diffKey, diffValue := range DiffSlicePointerStatsHTTPRequest(rec.StatsHTTPRequests, obj.StatsHTTPRequests) {
		diff["StatsHTTPRequests"+diffKey] = diffValue
	}
	if rec.StatsMaxconn != obj.StatsMaxconn {
		diff["StatsMaxconn"] = []interface{}{rec.StatsMaxconn, obj.StatsMaxconn}
	}
	if rec.StatsRealm != obj.StatsRealm {
		diff["StatsRealm"] = []interface{}{rec.StatsRealm, obj.StatsRealm}
	}
	for diffKey, diffValue := range DiffPointerString(rec.StatsRealmRealm, obj.StatsRealmRealm) {
		diff["StatsRealmRealm."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.StatsRefreshDelay, obj.StatsRefreshDelay) {
		diff["StatsRefreshDelay."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerString(rec.StatsShowDesc, obj.StatsShowDesc) {
		diff["StatsShowDesc."+diffKey] = diffValue
	}
	if rec.StatsShowLegends != obj.StatsShowLegends {
		diff["StatsShowLegends"] = []interface{}{rec.StatsShowLegends, obj.StatsShowLegends}
	}
	if rec.StatsShowModules != obj.StatsShowModules {
		diff["StatsShowModules"] = []interface{}{rec.StatsShowModules, obj.StatsShowModules}
	}
	for diffKey, diffValue := range DiffPointerString(rec.StatsShowNodeName, obj.StatsShowNodeName) {
		diff["StatsShowNodeName."+diffKey] = diffValue
	}
	if rec.StatsURIPrefix != obj.StatsURIPrefix {
		diff["StatsURIPrefix"] = []interface{}{rec.StatsURIPrefix, obj.StatsURIPrefix}
	}
	return diff
}

func DiffSlicePointerStatsAuth(x, y []*StatsAuth) map[string][]interface{} {
	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}

	if x == nil {
		return map[string][]interface{}{"": {nil, y}}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		for diffKey, diffValue := range DiffPointerStatsAuth(vx, vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}

func DiffPointerStatsAuth(x, y *StatsAuth) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "*StatsAuth"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffSlicePointerStatsHTTPRequest(x, y []*StatsHTTPRequest) map[string][]interface{} {
	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}

	if x == nil {
		return map[string][]interface{}{"": {nil, y}}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		for diffKey, diffValue := range DiffPointerStatsHTTPRequest(vx, vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}

func DiffPointerStatsHTTPRequest(x, y *StatsHTTPRequest) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "*StatsHTTPRequest"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}
