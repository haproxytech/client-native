// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"fmt"
)

func DiffPointerAttr(x, y *Attr) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "*Attr"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffSlicePointerDomain(x, y []*Domain) map[string][]interface{} {
	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}

	if x == nil {
		return map[string][]interface{}{"": {nil, y}}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		for diffKey, diffValue := range DiffPointerDomain(vx, vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}

func DiffPointerDomain(x, y *Domain) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "*Domain"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func (rec Cookie) Diff(obj Cookie) map[string][]interface{} {
	diff := make(map[string][]interface{})
	for diffKey, diffValue := range DiffSlicePointerAttr(rec.Attrs, obj.Attrs) {
		diff["Attrs"+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffSlicePointerDomain(rec.Domains, obj.Domains) {
		diff["Domains"+diffKey] = diffValue
	}
	if rec.Dynamic != obj.Dynamic {
		diff["Dynamic"] = []interface{}{rec.Dynamic, obj.Dynamic}
	}
	if rec.Httponly != obj.Httponly {
		diff["Httponly"] = []interface{}{rec.Httponly, obj.Httponly}
	}
	if rec.Indirect != obj.Indirect {
		diff["Indirect"] = []interface{}{rec.Indirect, obj.Indirect}
	}
	if rec.Maxidle != obj.Maxidle {
		diff["Maxidle"] = []interface{}{rec.Maxidle, obj.Maxidle}
	}
	if rec.Maxlife != obj.Maxlife {
		diff["Maxlife"] = []interface{}{rec.Maxlife, obj.Maxlife}
	}
	for diffKey, diffValue := range DiffPointerString(rec.Name, obj.Name) {
		diff["Name."+diffKey] = diffValue
	}
	if rec.Nocache != obj.Nocache {
		diff["Nocache"] = []interface{}{rec.Nocache, obj.Nocache}
	}
	if rec.Postonly != obj.Postonly {
		diff["Postonly"] = []interface{}{rec.Postonly, obj.Postonly}
	}
	if rec.Preserve != obj.Preserve {
		diff["Preserve"] = []interface{}{rec.Preserve, obj.Preserve}
	}
	if rec.Secure != obj.Secure {
		diff["Secure"] = []interface{}{rec.Secure, obj.Secure}
	}
	if rec.Type != obj.Type {
		diff["Type"] = []interface{}{rec.Type, obj.Type}
	}
	return diff
}

func DiffSlicePointerAttr(x, y []*Attr) map[string][]interface{} {
	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}

	if x == nil {
		return map[string][]interface{}{"": {nil, y}}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		for diffKey, diffValue := range DiffPointerAttr(vx, vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}
