// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"github.com/haproxytech/go-method-gen/pkg/eqdiff"
)

func (rec BackendBase) Equal(obj BackendBase, opts ...eqdiff.GoMethodGenOptions) bool {
	return EqualSlicePointerErrorfile(rec.ErrorFiles, obj.ErrorFiles, opts...) &&
		EqualSlicePointerErrorfiles(rec.ErrorFilesFromHTTPErrors, obj.ErrorFilesFromHTTPErrors, opts...) &&
		EqualSlicePointerForcePersist(rec.ForcePersistList, obj.ForcePersistList, opts...) &&
		EqualSlicePointerIgnorePersist(rec.IgnorePersistList, obj.IgnorePersistList, opts...) &&
		rec.Abortonclose == obj.Abortonclose &&
		rec.AcceptInvalidHTTPResponse == obj.AcceptInvalidHTTPResponse &&
		rec.AcceptUnsafeViolationsInHTTPResponse == obj.AcceptUnsafeViolationsInHTTPResponse &&
		rec.AdvCheck == obj.AdvCheck &&
		rec.Allbackups == obj.Allbackups &&
		EqualPointerBalance(rec.Balance, obj.Balance, opts...) &&
		EqualPointerInt64(rec.CheckTimeout, obj.CheckTimeout, opts...) &&
		rec.Checkcache == obj.Checkcache &&
		EqualPointerCompression(rec.Compression, obj.Compression, opts...) &&
		EqualPointerInt64(rec.ConnectTimeout, obj.ConnectTimeout, opts...) &&
		EqualPointerCookie(rec.Cookie, obj.Cookie, opts...) &&
		EqualPointerDefaultServer(rec.DefaultServer, obj.DefaultServer, opts...) &&
		rec.Description == obj.Description &&
		rec.Disabled == obj.Disabled &&
		rec.DynamicCookieKey == obj.DynamicCookieKey &&
		EqualPointerEmailAlert(rec.EmailAlert, obj.EmailAlert, opts...) &&
		rec.Enabled == obj.Enabled &&
		EqualPointerErrorloc(rec.Errorloc302, obj.Errorloc302, opts...) &&
		EqualPointerErrorloc(rec.Errorloc303, obj.Errorloc303, opts...) &&
		rec.ExternalCheck == obj.ExternalCheck &&
		rec.ExternalCheckCommand == obj.ExternalCheckCommand &&
		rec.ExternalCheckPath == obj.ExternalCheckPath &&
		EqualPointerBackendForcePersist(rec.ForcePersist, obj.ForcePersist, opts...) &&
		EqualPointerForwardfor(rec.Forwardfor, obj.Forwardfor, opts...) &&
		rec.From == obj.From &&
		EqualPointerInt64(rec.Fullconn, obj.Fullconn, opts...) &&
		rec.GUID == obj.GUID &&
		rec.H1CaseAdjustBogusServer == obj.H1CaseAdjustBogusServer &&
		EqualPointerInt64(rec.HashBalanceFactor, obj.HashBalanceFactor, opts...) &&
		rec.HashPreserveAffinity == obj.HashPreserveAffinity &&
		EqualPointerHashType(rec.HashType, obj.HashType, opts...) &&
		rec.HTTPBufferRequest == obj.HTTPBufferRequest &&
		rec.HTTPDropRequestTrailers == obj.HTTPDropRequestTrailers &&
		rec.HTTPNoDelay == obj.HTTPNoDelay &&
		rec.HTTPUseHtx == obj.HTTPUseHtx &&
		rec.HTTPConnectionMode == obj.HTTPConnectionMode &&
		EqualPointerInt64(rec.HTTPKeepAliveTimeout, obj.HTTPKeepAliveTimeout, opts...) &&
		rec.HTTPPretendKeepalive == obj.HTTPPretendKeepalive &&
		rec.HTTPProxy == obj.HTTPProxy &&
		EqualPointerInt64(rec.HTTPRequestTimeout, obj.HTTPRequestTimeout, opts...) &&
		rec.HTTPRestrictReqHdrNames == obj.HTTPRestrictReqHdrNames &&
		rec.HTTPReuse == obj.HTTPReuse &&
		EqualPointerString(rec.HTTPSendNameHeader, obj.HTTPSendNameHeader, opts...) &&
		EqualPointerHttpchkParams(rec.HttpchkParams, obj.HttpchkParams, opts...) &&
		EqualPointerInt64(rec.ID, obj.ID, opts...) &&
		EqualPointerBackendIgnorePersist(rec.IgnorePersist, obj.IgnorePersist, opts...) &&
		rec.IndependentStreams == obj.IndependentStreams &&
		rec.LoadServerStateFromFile == obj.LoadServerStateFromFile &&
		rec.LogHealthChecks == obj.LogHealthChecks &&
		rec.LogTag == obj.LogTag &&
		EqualPointerInt64(rec.MaxKeepAliveQueue, obj.MaxKeepAliveQueue, opts...) &&
		EqualMapStringInterface(rec.Metadata, obj.Metadata, opts...) &&
		rec.Mode == obj.Mode &&
		EqualPointerMysqlCheckParams(rec.MysqlCheckParams, obj.MysqlCheckParams, opts...) &&
		rec.Name == obj.Name &&
		rec.Nolinger == obj.Nolinger &&
		EqualPointerOriginalto(rec.Originalto, obj.Originalto, opts...) &&
		rec.Persist == obj.Persist &&
		EqualPointerPersistRule(rec.PersistRule, obj.PersistRule, opts...) &&
		EqualPointerPgsqlCheckParams(rec.PgsqlCheckParams, obj.PgsqlCheckParams, opts...) &&
		rec.PreferLastServer == obj.PreferLastServer &&
		EqualPointerInt64(rec.QueueTimeout, obj.QueueTimeout, opts...) &&
		EqualPointerRedispatch(rec.Redispatch, obj.Redispatch, opts...) &&
		EqualPointerInt64(rec.Retries, obj.Retries, opts...) &&
		rec.RetryOn == obj.RetryOn &&
		EqualPointerInt64(rec.ServerFinTimeout, obj.ServerFinTimeout, opts...) &&
		rec.ServerStateFileName == obj.ServerStateFileName &&
		EqualPointerInt64(rec.ServerTimeout, obj.ServerTimeout, opts...) &&
		EqualPointerSmtpchkParams(rec.SmtpchkParams, obj.SmtpchkParams, opts...) &&
		EqualPointerSource(rec.Source, obj.Source, opts...) &&
		rec.SpliceAuto == obj.SpliceAuto &&
		rec.SpliceRequest == obj.SpliceRequest &&
		rec.SpliceResponse == obj.SpliceResponse &&
		rec.SpopCheck == obj.SpopCheck &&
		rec.Srvtcpka == obj.Srvtcpka &&
		EqualPointerInt64(rec.SrvtcpkaCnt, obj.SrvtcpkaCnt, opts...) &&
		EqualPointerInt64(rec.SrvtcpkaIdle, obj.SrvtcpkaIdle, opts...) &&
		EqualPointerInt64(rec.SrvtcpkaIntvl, obj.SrvtcpkaIntvl, opts...) &&
		EqualPointerStatsOptions(rec.StatsOptions, obj.StatsOptions, opts...) &&
		EqualPointerConfigStickTable(rec.StickTable, obj.StickTable, opts...) &&
		EqualPointerInt64(rec.TarpitTimeout, obj.TarpitTimeout, opts...) &&
		rec.TCPSmartConnect == obj.TCPSmartConnect &&
		rec.Tcpka == obj.Tcpka &&
		rec.Transparent == obj.Transparent &&
		EqualPointerInt64(rec.TunnelTimeout, obj.TunnelTimeout, opts...) &&
		rec.UseFCGIApp == obj.UseFCGIApp
}

func EqualPointerBackendForcePersist(x, y *BackendForcePersist, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerBackendIgnorePersist(x, y *BackendIgnorePersist, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerBalance(x, y *Balance, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerCompression(x, y *Compression, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerConfigStickTable(x, y *ConfigStickTable, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerCookie(x, y *Cookie, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerDefaultServer(x, y *DefaultServer, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerEmailAlert(x, y *EmailAlert, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerErrorfile(x, y *Errorfile, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerErrorfiles(x, y *Errorfiles, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerErrorloc(x, y *Errorloc, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerForcePersist(x, y *ForcePersist, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerForwardfor(x, y *Forwardfor, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerHashType(x, y *HashType, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerHttpchkParams(x, y *HttpchkParams, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerIgnorePersist(x, y *IgnorePersist, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerMysqlCheckParams(x, y *MysqlCheckParams, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerOriginalto(x, y *Originalto, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerPersistRule(x, y *PersistRule, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerPgsqlCheckParams(x, y *PgsqlCheckParams, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerRedispatch(x, y *Redispatch, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerSmtpchkParams(x, y *SmtpchkParams, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerSource(x, y *Source, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualPointerStatsOptions(x, y *StatsOptions, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualSlicePointerErrorfile(x, y []*Errorfile, opts ...eqdiff.GoMethodGenOptions) bool {
	var opt *eqdiff.GoMethodGenOptions
	if len(opts) > 0 {
		opt = &opts[0]
	}

	if (x == nil) != (y == nil) {
		if opt == nil || (opt != nil && !opt.TreatNilNotAsEmpty) {
			if len(x) == 0 && len(y) == 0 {
				return true
			}
		}
		return false
	}

	if len(x) != len(y) {
		return false
	}

	for i, vx := range x {
		vy := y[i]
		if !EqualPointerErrorfile(vx, vy, opts...) {
			return false
		}
	}

	return true
}

func EqualSlicePointerErrorfiles(x, y []*Errorfiles, opts ...eqdiff.GoMethodGenOptions) bool {
	var opt *eqdiff.GoMethodGenOptions
	if len(opts) > 0 {
		opt = &opts[0]
	}

	if (x == nil) != (y == nil) {
		if opt == nil || (opt != nil && !opt.TreatNilNotAsEmpty) {
			if len(x) == 0 && len(y) == 0 {
				return true
			}
		}
		return false
	}

	if len(x) != len(y) {
		return false
	}

	for i, vx := range x {
		vy := y[i]
		if !EqualPointerErrorfiles(vx, vy, opts...) {
			return false
		}
	}

	return true
}

func EqualSlicePointerForcePersist(x, y []*ForcePersist, opts ...eqdiff.GoMethodGenOptions) bool {
	var opt *eqdiff.GoMethodGenOptions
	if len(opts) > 0 {
		opt = &opts[0]
	}

	if (x == nil) != (y == nil) {
		if opt == nil || (opt != nil && !opt.TreatNilNotAsEmpty) {
			if len(x) == 0 && len(y) == 0 {
				return true
			}
		}
		return false
	}

	if len(x) != len(y) {
		return false
	}

	for i, vx := range x {
		vy := y[i]
		if !EqualPointerForcePersist(vx, vy, opts...) {
			return false
		}
	}

	return true
}

func EqualSlicePointerIgnorePersist(x, y []*IgnorePersist, opts ...eqdiff.GoMethodGenOptions) bool {
	var opt *eqdiff.GoMethodGenOptions
	if len(opts) > 0 {
		opt = &opts[0]
	}

	if (x == nil) != (y == nil) {
		if opt == nil || (opt != nil && !opt.TreatNilNotAsEmpty) {
			if len(x) == 0 && len(y) == 0 {
				return true
			}
		}
		return false
	}

	if len(x) != len(y) {
		return false
	}

	for i, vx := range x {
		vy := y[i]
		if !EqualPointerIgnorePersist(vx, vy, opts...) {
			return false
		}
	}

	return true
}
