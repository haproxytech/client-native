// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"github.com/haproxytech/go-method-gen/pkg/eqdiff"
)

func (rec FrontendBase) Diff(obj FrontendBase, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	for diffKey, diffValue := range DiffSlicePointerErrorfile(rec.ErrorFiles, obj.ErrorFiles, opts...) {
		diff["ErrorFiles"+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffSlicePointerErrorfiles(rec.ErrorFilesFromHTTPErrors, obj.ErrorFilesFromHTTPErrors, opts...) {
		diff["ErrorFilesFromHTTPErrors"+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffSliceString(rec.LogSteps, obj.LogSteps, opts...) {
		diff["LogSteps"+diffKey] = diffValue
	}
	if rec.AcceptInvalidHTTPRequest != obj.AcceptInvalidHTTPRequest {
		diff["AcceptInvalidHTTPRequest"] = []interface{}{rec.AcceptInvalidHTTPRequest, obj.AcceptInvalidHTTPRequest}
	}
	if rec.AcceptUnsafeViolationsInHTTPRequest != obj.AcceptUnsafeViolationsInHTTPRequest {
		diff["AcceptUnsafeViolationsInHTTPRequest"] = []interface{}{rec.AcceptUnsafeViolationsInHTTPRequest, obj.AcceptUnsafeViolationsInHTTPRequest}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Backlog, obj.Backlog, opts...) {
		diff["Backlog."+diffKey] = diffValue
	}
	if rec.Clflog != obj.Clflog {
		diff["Clflog"] = []interface{}{rec.Clflog, obj.Clflog}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ClientFinTimeout, obj.ClientFinTimeout, opts...) {
		diff["ClientFinTimeout."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ClientTimeout, obj.ClientTimeout, opts...) {
		diff["ClientTimeout."+diffKey] = diffValue
	}
	if rec.Clitcpka != obj.Clitcpka {
		diff["Clitcpka"] = []interface{}{rec.Clitcpka, obj.Clitcpka}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ClitcpkaCnt, obj.ClitcpkaCnt, opts...) {
		diff["ClitcpkaCnt."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ClitcpkaIdle, obj.ClitcpkaIdle, opts...) {
		diff["ClitcpkaIdle."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ClitcpkaIntvl, obj.ClitcpkaIntvl, opts...) {
		diff["ClitcpkaIntvl."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerCompression(rec.Compression, obj.Compression, opts...) {
		diff["Compression."+diffKey] = diffValue
	}
	if rec.Contstats != obj.Contstats {
		diff["Contstats"] = []interface{}{rec.Contstats, obj.Contstats}
	}
	if rec.DefaultBackend != obj.DefaultBackend {
		diff["DefaultBackend"] = []interface{}{rec.DefaultBackend, obj.DefaultBackend}
	}
	if rec.Description != obj.Description {
		diff["Description"] = []interface{}{rec.Description, obj.Description}
	}
	if rec.DisableH2Upgrade != obj.DisableH2Upgrade {
		diff["DisableH2Upgrade"] = []interface{}{rec.DisableH2Upgrade, obj.DisableH2Upgrade}
	}
	if rec.Disabled != obj.Disabled {
		diff["Disabled"] = []interface{}{rec.Disabled, obj.Disabled}
	}
	if rec.DontlogNormal != obj.DontlogNormal {
		diff["DontlogNormal"] = []interface{}{rec.DontlogNormal, obj.DontlogNormal}
	}
	if rec.Dontlognull != obj.Dontlognull {
		diff["Dontlognull"] = []interface{}{rec.Dontlognull, obj.Dontlognull}
	}
	for diffKey, diffValue := range DiffPointerEmailAlert(rec.EmailAlert, obj.EmailAlert, opts...) {
		diff["EmailAlert."+diffKey] = diffValue
	}
	if rec.Enabled != obj.Enabled {
		diff["Enabled"] = []interface{}{rec.Enabled, obj.Enabled}
	}
	if rec.ErrorLogFormat != obj.ErrorLogFormat {
		diff["ErrorLogFormat"] = []interface{}{rec.ErrorLogFormat, obj.ErrorLogFormat}
	}
	for diffKey, diffValue := range DiffPointerErrorloc(rec.Errorloc302, obj.Errorloc302, opts...) {
		diff["Errorloc302."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerErrorloc(rec.Errorloc303, obj.Errorloc303, opts...) {
		diff["Errorloc303."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerForwardfor(rec.Forwardfor, obj.Forwardfor, opts...) {
		diff["Forwardfor."+diffKey] = diffValue
	}
	if rec.From != obj.From {
		diff["From"] = []interface{}{rec.From, obj.From}
	}
	if rec.GUID != obj.GUID {
		diff["GUID"] = []interface{}{rec.GUID, obj.GUID}
	}
	if rec.H1CaseAdjustBogusClient != obj.H1CaseAdjustBogusClient {
		diff["H1CaseAdjustBogusClient"] = []interface{}{rec.H1CaseAdjustBogusClient, obj.H1CaseAdjustBogusClient}
	}
	if rec.HTTPBufferRequest != obj.HTTPBufferRequest {
		diff["HTTPBufferRequest"] = []interface{}{rec.HTTPBufferRequest, obj.HTTPBufferRequest}
	}
	if rec.HTTPDropResponseTrailers != obj.HTTPDropResponseTrailers {
		diff["HTTPDropResponseTrailers"] = []interface{}{rec.HTTPDropResponseTrailers, obj.HTTPDropResponseTrailers}
	}
	if rec.HTTPUseHtx != obj.HTTPUseHtx {
		diff["HTTPUseHtx"] = []interface{}{rec.HTTPUseHtx, obj.HTTPUseHtx}
	}
	if rec.HTTPConnectionMode != obj.HTTPConnectionMode {
		diff["HTTPConnectionMode"] = []interface{}{rec.HTTPConnectionMode, obj.HTTPConnectionMode}
	}
	if rec.HTTPIgnoreProbes != obj.HTTPIgnoreProbes {
		diff["HTTPIgnoreProbes"] = []interface{}{rec.HTTPIgnoreProbes, obj.HTTPIgnoreProbes}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.HTTPKeepAliveTimeout, obj.HTTPKeepAliveTimeout, opts...) {
		diff["HTTPKeepAliveTimeout."+diffKey] = diffValue
	}
	if rec.HTTPNoDelay != obj.HTTPNoDelay {
		diff["HTTPNoDelay"] = []interface{}{rec.HTTPNoDelay, obj.HTTPNoDelay}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.HTTPRequestTimeout, obj.HTTPRequestTimeout, opts...) {
		diff["HTTPRequestTimeout."+diffKey] = diffValue
	}
	if rec.HTTPRestrictReqHdrNames != obj.HTTPRestrictReqHdrNames {
		diff["HTTPRestrictReqHdrNames"] = []interface{}{rec.HTTPRestrictReqHdrNames, obj.HTTPRestrictReqHdrNames}
	}
	if rec.HTTPUseProxyHeader != obj.HTTPUseProxyHeader {
		diff["HTTPUseProxyHeader"] = []interface{}{rec.HTTPUseProxyHeader, obj.HTTPUseProxyHeader}
	}
	if rec.Httplog != obj.Httplog {
		diff["Httplog"] = []interface{}{rec.Httplog, obj.Httplog}
	}
	if rec.Httpslog != obj.Httpslog {
		diff["Httpslog"] = []interface{}{rec.Httpslog, obj.Httpslog}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ID, obj.ID, opts...) {
		diff["ID."+diffKey] = diffValue
	}
	if rec.IdleCloseOnResponse != obj.IdleCloseOnResponse {
		diff["IdleCloseOnResponse"] = []interface{}{rec.IdleCloseOnResponse, obj.IdleCloseOnResponse}
	}
	if rec.IndependentStreams != obj.IndependentStreams {
		diff["IndependentStreams"] = []interface{}{rec.IndependentStreams, obj.IndependentStreams}
	}
	if rec.LogFormat != obj.LogFormat {
		diff["LogFormat"] = []interface{}{rec.LogFormat, obj.LogFormat}
	}
	if rec.LogFormatSd != obj.LogFormatSd {
		diff["LogFormatSd"] = []interface{}{rec.LogFormatSd, obj.LogFormatSd}
	}
	if rec.LogSeparateErrors != obj.LogSeparateErrors {
		diff["LogSeparateErrors"] = []interface{}{rec.LogSeparateErrors, obj.LogSeparateErrors}
	}
	if rec.LogTag != obj.LogTag {
		diff["LogTag"] = []interface{}{rec.LogTag, obj.LogTag}
	}
	if rec.Logasap != obj.Logasap {
		diff["Logasap"] = []interface{}{rec.Logasap, obj.Logasap}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Maxconn, obj.Maxconn, opts...) {
		diff["Maxconn."+diffKey] = diffValue
	}
	if rec.Mode != obj.Mode {
		diff["Mode"] = []interface{}{rec.Mode, obj.Mode}
	}
	for diffKey, diffValue := range DiffPointerMonitorFail(rec.MonitorFail, obj.MonitorFail, opts...) {
		diff["MonitorFail."+diffKey] = diffValue
	}
	for diffKey, diffValue := range rec.MonitorURI.Diff(obj.MonitorURI, opts...) {
		diff["MonitorURI."+diffKey] = diffValue
	}
	if rec.Name != obj.Name {
		diff["Name"] = []interface{}{rec.Name, obj.Name}
	}
	if rec.Nolinger != obj.Nolinger {
		diff["Nolinger"] = []interface{}{rec.Nolinger, obj.Nolinger}
	}
	for diffKey, diffValue := range DiffPointerOriginalto(rec.Originalto, obj.Originalto, opts...) {
		diff["Originalto."+diffKey] = diffValue
	}
	if rec.SocketStats != obj.SocketStats {
		diff["SocketStats"] = []interface{}{rec.SocketStats, obj.SocketStats}
	}
	if rec.SpliceAuto != obj.SpliceAuto {
		diff["SpliceAuto"] = []interface{}{rec.SpliceAuto, obj.SpliceAuto}
	}
	if rec.SpliceRequest != obj.SpliceRequest {
		diff["SpliceRequest"] = []interface{}{rec.SpliceRequest, obj.SpliceRequest}
	}
	if rec.SpliceResponse != obj.SpliceResponse {
		diff["SpliceResponse"] = []interface{}{rec.SpliceResponse, obj.SpliceResponse}
	}
	for diffKey, diffValue := range DiffPointerStatsOptions(rec.StatsOptions, obj.StatsOptions, opts...) {
		diff["StatsOptions."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerConfigStickTable(rec.StickTable, obj.StickTable, opts...) {
		diff["StickTable."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.TarpitTimeout, obj.TarpitTimeout, opts...) {
		diff["TarpitTimeout."+diffKey] = diffValue
	}
	if rec.TCPSmartAccept != obj.TCPSmartAccept {
		diff["TCPSmartAccept"] = []interface{}{rec.TCPSmartAccept, obj.TCPSmartAccept}
	}
	if rec.Tcpka != obj.Tcpka {
		diff["Tcpka"] = []interface{}{rec.Tcpka, obj.Tcpka}
	}
	if rec.Tcplog != obj.Tcplog {
		diff["Tcplog"] = []interface{}{rec.Tcplog, obj.Tcplog}
	}
	if rec.UniqueIDFormat != obj.UniqueIDFormat {
		diff["UniqueIDFormat"] = []interface{}{rec.UniqueIDFormat, obj.UniqueIDFormat}
	}
	if rec.UniqueIDHeader != obj.UniqueIDHeader {
		diff["UniqueIDHeader"] = []interface{}{rec.UniqueIDHeader, obj.UniqueIDHeader}
	}
	return diff
}

func DiffPointerMonitorFail(x, y *MonitorFail, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "MonitorFail"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}
