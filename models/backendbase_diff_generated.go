// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"fmt"

	"github.com/haproxytech/go-method-gen/pkg/eqdiff"
)

func (rec BackendBase) Diff(obj BackendBase, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	for diffKey, diffValue := range DiffSlicePointerErrorfile(rec.ErrorFiles, obj.ErrorFiles, opts...) {
		diff["ErrorFiles"+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffSlicePointerErrorfiles(rec.ErrorFilesFromHTTPErrors, obj.ErrorFilesFromHTTPErrors, opts...) {
		diff["ErrorFilesFromHTTPErrors"+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffSlicePointerForcePersist(rec.ForcePersistList, obj.ForcePersistList, opts...) {
		diff["ForcePersistList"+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffSlicePointerIgnorePersist(rec.IgnorePersistList, obj.IgnorePersistList, opts...) {
		diff["IgnorePersistList"+diffKey] = diffValue
	}
	if rec.Abortonclose != obj.Abortonclose {
		diff["Abortonclose"] = []interface{}{rec.Abortonclose, obj.Abortonclose}
	}
	if rec.AcceptInvalidHTTPResponse != obj.AcceptInvalidHTTPResponse {
		diff["AcceptInvalidHTTPResponse"] = []interface{}{rec.AcceptInvalidHTTPResponse, obj.AcceptInvalidHTTPResponse}
	}
	if rec.AcceptUnsafeViolationsInHTTPResponse != obj.AcceptUnsafeViolationsInHTTPResponse {
		diff["AcceptUnsafeViolationsInHTTPResponse"] = []interface{}{rec.AcceptUnsafeViolationsInHTTPResponse, obj.AcceptUnsafeViolationsInHTTPResponse}
	}
	if rec.AdvCheck != obj.AdvCheck {
		diff["AdvCheck"] = []interface{}{rec.AdvCheck, obj.AdvCheck}
	}
	if rec.Allbackups != obj.Allbackups {
		diff["Allbackups"] = []interface{}{rec.Allbackups, obj.Allbackups}
	}
	for diffKey, diffValue := range DiffPointerBalance(rec.Balance, obj.Balance, opts...) {
		diff["Balance."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.CheckTimeout, obj.CheckTimeout, opts...) {
		diff["CheckTimeout."+diffKey] = diffValue
	}
	if rec.Checkcache != obj.Checkcache {
		diff["Checkcache"] = []interface{}{rec.Checkcache, obj.Checkcache}
	}
	for diffKey, diffValue := range DiffPointerCompression(rec.Compression, obj.Compression, opts...) {
		diff["Compression."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ConnectTimeout, obj.ConnectTimeout, opts...) {
		diff["ConnectTimeout."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerCookie(rec.Cookie, obj.Cookie, opts...) {
		diff["Cookie."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerDefaultServer(rec.DefaultServer, obj.DefaultServer, opts...) {
		diff["DefaultServer."+diffKey] = diffValue
	}
	if rec.Description != obj.Description {
		diff["Description"] = []interface{}{rec.Description, obj.Description}
	}
	if rec.Disabled != obj.Disabled {
		diff["Disabled"] = []interface{}{rec.Disabled, obj.Disabled}
	}
	if rec.DynamicCookieKey != obj.DynamicCookieKey {
		diff["DynamicCookieKey"] = []interface{}{rec.DynamicCookieKey, obj.DynamicCookieKey}
	}
	for diffKey, diffValue := range DiffPointerEmailAlert(rec.EmailAlert, obj.EmailAlert, opts...) {
		diff["EmailAlert."+diffKey] = diffValue
	}
	if rec.Enabled != obj.Enabled {
		diff["Enabled"] = []interface{}{rec.Enabled, obj.Enabled}
	}
	for diffKey, diffValue := range DiffPointerErrorloc(rec.Errorloc302, obj.Errorloc302, opts...) {
		diff["Errorloc302."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerErrorloc(rec.Errorloc303, obj.Errorloc303, opts...) {
		diff["Errorloc303."+diffKey] = diffValue
	}
	if rec.ExternalCheck != obj.ExternalCheck {
		diff["ExternalCheck"] = []interface{}{rec.ExternalCheck, obj.ExternalCheck}
	}
	if rec.ExternalCheckCommand != obj.ExternalCheckCommand {
		diff["ExternalCheckCommand"] = []interface{}{rec.ExternalCheckCommand, obj.ExternalCheckCommand}
	}
	if rec.ExternalCheckPath != obj.ExternalCheckPath {
		diff["ExternalCheckPath"] = []interface{}{rec.ExternalCheckPath, obj.ExternalCheckPath}
	}
	for diffKey, diffValue := range DiffPointerBackendForcePersist(rec.ForcePersist, obj.ForcePersist, opts...) {
		diff["ForcePersist."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerForwardfor(rec.Forwardfor, obj.Forwardfor, opts...) {
		diff["Forwardfor."+diffKey] = diffValue
	}
	if rec.From != obj.From {
		diff["From"] = []interface{}{rec.From, obj.From}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Fullconn, obj.Fullconn, opts...) {
		diff["Fullconn."+diffKey] = diffValue
	}
	if rec.GUID != obj.GUID {
		diff["GUID"] = []interface{}{rec.GUID, obj.GUID}
	}
	if rec.H1CaseAdjustBogusServer != obj.H1CaseAdjustBogusServer {
		diff["H1CaseAdjustBogusServer"] = []interface{}{rec.H1CaseAdjustBogusServer, obj.H1CaseAdjustBogusServer}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.HashBalanceFactor, obj.HashBalanceFactor, opts...) {
		diff["HashBalanceFactor."+diffKey] = diffValue
	}
	if rec.HashPreserveAffinity != obj.HashPreserveAffinity {
		diff["HashPreserveAffinity"] = []interface{}{rec.HashPreserveAffinity, obj.HashPreserveAffinity}
	}
	for diffKey, diffValue := range DiffPointerHashType(rec.HashType, obj.HashType, opts...) {
		diff["HashType."+diffKey] = diffValue
	}
	if rec.HTTPBufferRequest != obj.HTTPBufferRequest {
		diff["HTTPBufferRequest"] = []interface{}{rec.HTTPBufferRequest, obj.HTTPBufferRequest}
	}
	if rec.HTTPDropRequestTrailers != obj.HTTPDropRequestTrailers {
		diff["HTTPDropRequestTrailers"] = []interface{}{rec.HTTPDropRequestTrailers, obj.HTTPDropRequestTrailers}
	}
	if rec.HTTPNoDelay != obj.HTTPNoDelay {
		diff["HTTPNoDelay"] = []interface{}{rec.HTTPNoDelay, obj.HTTPNoDelay}
	}
	if rec.HTTPUseHtx != obj.HTTPUseHtx {
		diff["HTTPUseHtx"] = []interface{}{rec.HTTPUseHtx, obj.HTTPUseHtx}
	}
	if rec.HTTPConnectionMode != obj.HTTPConnectionMode {
		diff["HTTPConnectionMode"] = []interface{}{rec.HTTPConnectionMode, obj.HTTPConnectionMode}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.HTTPKeepAliveTimeout, obj.HTTPKeepAliveTimeout, opts...) {
		diff["HTTPKeepAliveTimeout."+diffKey] = diffValue
	}
	if rec.HTTPPretendKeepalive != obj.HTTPPretendKeepalive {
		diff["HTTPPretendKeepalive"] = []interface{}{rec.HTTPPretendKeepalive, obj.HTTPPretendKeepalive}
	}
	if rec.HTTPProxy != obj.HTTPProxy {
		diff["HTTPProxy"] = []interface{}{rec.HTTPProxy, obj.HTTPProxy}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.HTTPRequestTimeout, obj.HTTPRequestTimeout, opts...) {
		diff["HTTPRequestTimeout."+diffKey] = diffValue
	}
	if rec.HTTPRestrictReqHdrNames != obj.HTTPRestrictReqHdrNames {
		diff["HTTPRestrictReqHdrNames"] = []interface{}{rec.HTTPRestrictReqHdrNames, obj.HTTPRestrictReqHdrNames}
	}
	if rec.HTTPReuse != obj.HTTPReuse {
		diff["HTTPReuse"] = []interface{}{rec.HTTPReuse, obj.HTTPReuse}
	}
	for diffKey, diffValue := range DiffPointerString(rec.HTTPSendNameHeader, obj.HTTPSendNameHeader, opts...) {
		diff["HTTPSendNameHeader."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerHttpchkParams(rec.HttpchkParams, obj.HttpchkParams, opts...) {
		diff["HttpchkParams."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ID, obj.ID, opts...) {
		diff["ID."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerBackendIgnorePersist(rec.IgnorePersist, obj.IgnorePersist, opts...) {
		diff["IgnorePersist."+diffKey] = diffValue
	}
	if rec.IndependentStreams != obj.IndependentStreams {
		diff["IndependentStreams"] = []interface{}{rec.IndependentStreams, obj.IndependentStreams}
	}
	if rec.LoadServerStateFromFile != obj.LoadServerStateFromFile {
		diff["LoadServerStateFromFile"] = []interface{}{rec.LoadServerStateFromFile, obj.LoadServerStateFromFile}
	}
	if rec.LogHealthChecks != obj.LogHealthChecks {
		diff["LogHealthChecks"] = []interface{}{rec.LogHealthChecks, obj.LogHealthChecks}
	}
	if rec.LogTag != obj.LogTag {
		diff["LogTag"] = []interface{}{rec.LogTag, obj.LogTag}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.MaxKeepAliveQueue, obj.MaxKeepAliveQueue, opts...) {
		diff["MaxKeepAliveQueue."+diffKey] = diffValue
	}
	if rec.Mode != obj.Mode {
		diff["Mode"] = []interface{}{rec.Mode, obj.Mode}
	}
	for diffKey, diffValue := range DiffPointerMysqlCheckParams(rec.MysqlCheckParams, obj.MysqlCheckParams, opts...) {
		diff["MysqlCheckParams."+diffKey] = diffValue
	}
	if rec.Name != obj.Name {
		diff["Name"] = []interface{}{rec.Name, obj.Name}
	}
	if rec.Nolinger != obj.Nolinger {
		diff["Nolinger"] = []interface{}{rec.Nolinger, obj.Nolinger}
	}
	for diffKey, diffValue := range DiffPointerOriginalto(rec.Originalto, obj.Originalto, opts...) {
		diff["Originalto."+diffKey] = diffValue
	}
	if rec.Persist != obj.Persist {
		diff["Persist"] = []interface{}{rec.Persist, obj.Persist}
	}
	for diffKey, diffValue := range DiffPointerPersistRule(rec.PersistRule, obj.PersistRule, opts...) {
		diff["PersistRule."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerPgsqlCheckParams(rec.PgsqlCheckParams, obj.PgsqlCheckParams, opts...) {
		diff["PgsqlCheckParams."+diffKey] = diffValue
	}
	if rec.PreferLastServer != obj.PreferLastServer {
		diff["PreferLastServer"] = []interface{}{rec.PreferLastServer, obj.PreferLastServer}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.QueueTimeout, obj.QueueTimeout, opts...) {
		diff["QueueTimeout."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerRedispatch(rec.Redispatch, obj.Redispatch, opts...) {
		diff["Redispatch."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Retries, obj.Retries, opts...) {
		diff["Retries."+diffKey] = diffValue
	}
	if rec.RetryOn != obj.RetryOn {
		diff["RetryOn"] = []interface{}{rec.RetryOn, obj.RetryOn}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ServerFinTimeout, obj.ServerFinTimeout, opts...) {
		diff["ServerFinTimeout."+diffKey] = diffValue
	}
	if rec.ServerStateFileName != obj.ServerStateFileName {
		diff["ServerStateFileName"] = []interface{}{rec.ServerStateFileName, obj.ServerStateFileName}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ServerTimeout, obj.ServerTimeout, opts...) {
		diff["ServerTimeout."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerSmtpchkParams(rec.SmtpchkParams, obj.SmtpchkParams, opts...) {
		diff["SmtpchkParams."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerSource(rec.Source, obj.Source, opts...) {
		diff["Source."+diffKey] = diffValue
	}
	if rec.SpliceAuto != obj.SpliceAuto {
		diff["SpliceAuto"] = []interface{}{rec.SpliceAuto, obj.SpliceAuto}
	}
	if rec.SpliceRequest != obj.SpliceRequest {
		diff["SpliceRequest"] = []interface{}{rec.SpliceRequest, obj.SpliceRequest}
	}
	if rec.SpliceResponse != obj.SpliceResponse {
		diff["SpliceResponse"] = []interface{}{rec.SpliceResponse, obj.SpliceResponse}
	}
	if rec.SpopCheck != obj.SpopCheck {
		diff["SpopCheck"] = []interface{}{rec.SpopCheck, obj.SpopCheck}
	}
	if rec.Srvtcpka != obj.Srvtcpka {
		diff["Srvtcpka"] = []interface{}{rec.Srvtcpka, obj.Srvtcpka}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.SrvtcpkaCnt, obj.SrvtcpkaCnt, opts...) {
		diff["SrvtcpkaCnt."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.SrvtcpkaIdle, obj.SrvtcpkaIdle, opts...) {
		diff["SrvtcpkaIdle."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.SrvtcpkaIntvl, obj.SrvtcpkaIntvl, opts...) {
		diff["SrvtcpkaIntvl."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerStatsOptions(rec.StatsOptions, obj.StatsOptions, opts...) {
		diff["StatsOptions."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerConfigStickTable(rec.StickTable, obj.StickTable, opts...) {
		diff["StickTable."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.TarpitTimeout, obj.TarpitTimeout, opts...) {
		diff["TarpitTimeout."+diffKey] = diffValue
	}
	if rec.TCPSmartConnect != obj.TCPSmartConnect {
		diff["TCPSmartConnect"] = []interface{}{rec.TCPSmartConnect, obj.TCPSmartConnect}
	}
	if rec.Tcpka != obj.Tcpka {
		diff["Tcpka"] = []interface{}{rec.Tcpka, obj.Tcpka}
	}
	if rec.Transparent != obj.Transparent {
		diff["Transparent"] = []interface{}{rec.Transparent, obj.Transparent}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.TunnelTimeout, obj.TunnelTimeout, opts...) {
		diff["TunnelTimeout."+diffKey] = diffValue
	}
	if rec.UseFCGIApp != obj.UseFCGIApp {
		diff["UseFCGIApp"] = []interface{}{rec.UseFCGIApp, obj.UseFCGIApp}
	}
	return diff
}

func DiffPointerBackendForcePersist(x, y *BackendForcePersist, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "ForcePersist"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerBackendIgnorePersist(x, y *BackendIgnorePersist, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "IgnorePersist"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerBalance(x, y *Balance, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "Balance"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerCompression(x, y *Compression, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "Compression"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerConfigStickTable(x, y *ConfigStickTable, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "StickTable"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerCookie(x, y *Cookie, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "Cookie"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerDefaultServer(x, y *DefaultServer, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "DefaultServer"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerEmailAlert(x, y *EmailAlert, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "EmailAlert"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerErrorfile(x, y *Errorfile, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "*Errorfile"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerErrorfiles(x, y *Errorfiles, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "*Errorfiles"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerErrorloc(x, y *Errorloc, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "Errorloc303"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerForcePersist(x, y *ForcePersist, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "*ForcePersist"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerForwardfor(x, y *Forwardfor, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "Forwardfor"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerHashType(x, y *HashType, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "HashType"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerHttpchkParams(x, y *HttpchkParams, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "HttpchkParams"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerIgnorePersist(x, y *IgnorePersist, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "*IgnorePersist"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerMysqlCheckParams(x, y *MysqlCheckParams, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "MysqlCheckParams"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerOriginalto(x, y *Originalto, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "Originalto"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerPersistRule(x, y *PersistRule, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "PersistRule"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerPgsqlCheckParams(x, y *PgsqlCheckParams, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "PgsqlCheckParams"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerRedispatch(x, y *Redispatch, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "Redispatch"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerSmtpchkParams(x, y *SmtpchkParams, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "SmtpchkParams"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerSource(x, y *Source, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "Source"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerStatsOptions(x, y *StatsOptions, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "StatsOptions"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffSlicePointerErrorfile(x, y []*Errorfile, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	var opt *eqdiff.GoMethodGenOptions
	if len(opts) > 0 {
		opt = &opts[0]
	}

	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}
	if opt == nil || (opt != nil && !opt.TreatNilNotAsEmpty) {
		if (x == nil && lenY == 0) || (y == nil && lenX == 0) {
			return diff
		}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		for diffKey, diffValue := range DiffPointerErrorfile(vx, vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}

func DiffSlicePointerErrorfiles(x, y []*Errorfiles, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	var opt *eqdiff.GoMethodGenOptions
	if len(opts) > 0 {
		opt = &opts[0]
	}

	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}
	if opt == nil || (opt != nil && !opt.TreatNilNotAsEmpty) {
		if (x == nil && lenY == 0) || (y == nil && lenX == 0) {
			return diff
		}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		for diffKey, diffValue := range DiffPointerErrorfiles(vx, vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}

func DiffSlicePointerForcePersist(x, y []*ForcePersist, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	var opt *eqdiff.GoMethodGenOptions
	if len(opts) > 0 {
		opt = &opts[0]
	}

	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}
	if opt == nil || (opt != nil && !opt.TreatNilNotAsEmpty) {
		if (x == nil && lenY == 0) || (y == nil && lenX == 0) {
			return diff
		}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		for diffKey, diffValue := range DiffPointerForcePersist(vx, vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}

func DiffSlicePointerIgnorePersist(x, y []*IgnorePersist, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	var opt *eqdiff.GoMethodGenOptions
	if len(opts) > 0 {
		opt = &opts[0]
	}

	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}
	if opt == nil || (opt != nil && !opt.TreatNilNotAsEmpty) {
		if (x == nil && lenY == 0) || (y == nil && lenX == 0) {
			return diff
		}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		for diffKey, diffValue := range DiffPointerIgnorePersist(vx, vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}
