// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"fmt"
)

func DiffSlicePointerAwsFilters(x, y []*AwsFilters) map[string][]interface{} {
	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}

	if x == nil {
		return map[string][]interface{}{"": {nil, y}}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		for diffKey, diffValue := range DiffPointerAwsFilters(vx, vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}

func (rec AwsRegion) Diff(obj AwsRegion) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if rec.AccessKeyID != obj.AccessKeyID {
		diff["AccessKeyID"] = []interface{}{rec.AccessKeyID, obj.AccessKeyID}
	}
	for diffKey, diffValue := range DiffSlicePointerAwsFilters(rec.Allowlist, obj.Allowlist) {
		diff["Allowlist"+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffSlicePointerAwsFilters(rec.Denylist, obj.Denylist) {
		diff["Denylist"+diffKey] = diffValue
	}
	if rec.Description != obj.Description {
		diff["Description"] = []interface{}{rec.Description, obj.Description}
	}
	for diffKey, diffValue := range DiffPointerBool(rec.Enabled, obj.Enabled) {
		diff["Enabled."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerString(rec.ID, obj.ID) {
		diff["ID."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerString(rec.IPV4Address, obj.IPV4Address) {
		diff["IPV4Address."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerString(rec.Name, obj.Name) {
		diff["Name."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerString(rec.Region, obj.Region) {
		diff["Region."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.RetryTimeout, obj.RetryTimeout) {
		diff["RetryTimeout."+diffKey] = diffValue
	}
	if rec.SecretAccessKey != obj.SecretAccessKey {
		diff["SecretAccessKey"] = []interface{}{rec.SecretAccessKey, obj.SecretAccessKey}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ServerSlotsBase, obj.ServerSlotsBase) {
		diff["ServerSlotsBase."+diffKey] = diffValue
	}
	if rec.ServerSlotsGrowthIncrement != obj.ServerSlotsGrowthIncrement {
		diff["ServerSlotsGrowthIncrement"] = []interface{}{rec.ServerSlotsGrowthIncrement, obj.ServerSlotsGrowthIncrement}
	}
	for diffKey, diffValue := range DiffPointerString(rec.ServerSlotsGrowthType, obj.ServerSlotsGrowthType) {
		diff["ServerSlotsGrowthType."+diffKey] = diffValue
	}
	return diff
}

func DiffPointerAwsFilters(x, y *AwsFilters) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "*AwsFilters"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}

func DiffPointerBool(x, y *bool) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "Enabled"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	if *x != *y {
		diff[key] = []interface{}{x, y}
	}

	return diff
}
