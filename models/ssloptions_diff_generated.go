// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"fmt"
)

func (rec SslOptions) Diff(obj SslOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	for diffKey, diffValue := range DiffSlicePointerSslEngine(rec.SslEngines, obj.SslEngines) {
		diff["SslEngines"+diffKey] = diffValue
	}
	if rec.AcmeScheduler != obj.AcmeScheduler {
		diff["AcmeScheduler"] = []interface{}{rec.AcmeScheduler, obj.AcmeScheduler}
	}
	if rec.CaBase != obj.CaBase {
		diff["CaBase"] = []interface{}{rec.CaBase, obj.CaBase}
	}
	if rec.CrtBase != obj.CrtBase {
		diff["CrtBase"] = []interface{}{rec.CrtBase, obj.CrtBase}
	}
	if rec.DefaultBindCiphers != obj.DefaultBindCiphers {
		diff["DefaultBindCiphers"] = []interface{}{rec.DefaultBindCiphers, obj.DefaultBindCiphers}
	}
	if rec.DefaultBindCiphersuites != obj.DefaultBindCiphersuites {
		diff["DefaultBindCiphersuites"] = []interface{}{rec.DefaultBindCiphersuites, obj.DefaultBindCiphersuites}
	}
	if rec.DefaultBindClientSigalgs != obj.DefaultBindClientSigalgs {
		diff["DefaultBindClientSigalgs"] = []interface{}{rec.DefaultBindClientSigalgs, obj.DefaultBindClientSigalgs}
	}
	if rec.DefaultBindCurves != obj.DefaultBindCurves {
		diff["DefaultBindCurves"] = []interface{}{rec.DefaultBindCurves, obj.DefaultBindCurves}
	}
	if rec.DefaultBindOptions != obj.DefaultBindOptions {
		diff["DefaultBindOptions"] = []interface{}{rec.DefaultBindOptions, obj.DefaultBindOptions}
	}
	if rec.DefaultBindSigalgs != obj.DefaultBindSigalgs {
		diff["DefaultBindSigalgs"] = []interface{}{rec.DefaultBindSigalgs, obj.DefaultBindSigalgs}
	}
	if rec.DefaultServerCiphers != obj.DefaultServerCiphers {
		diff["DefaultServerCiphers"] = []interface{}{rec.DefaultServerCiphers, obj.DefaultServerCiphers}
	}
	if rec.DefaultServerCiphersuites != obj.DefaultServerCiphersuites {
		diff["DefaultServerCiphersuites"] = []interface{}{rec.DefaultServerCiphersuites, obj.DefaultServerCiphersuites}
	}
	if rec.DefaultServerClientSigalgs != obj.DefaultServerClientSigalgs {
		diff["DefaultServerClientSigalgs"] = []interface{}{rec.DefaultServerClientSigalgs, obj.DefaultServerClientSigalgs}
	}
	if rec.DefaultServerCurves != obj.DefaultServerCurves {
		diff["DefaultServerCurves"] = []interface{}{rec.DefaultServerCurves, obj.DefaultServerCurves}
	}
	if rec.DefaultServerOptions != obj.DefaultServerOptions {
		diff["DefaultServerOptions"] = []interface{}{rec.DefaultServerOptions, obj.DefaultServerOptions}
	}
	if rec.DefaultServerSigalgs != obj.DefaultServerSigalgs {
		diff["DefaultServerSigalgs"] = []interface{}{rec.DefaultServerSigalgs, obj.DefaultServerSigalgs}
	}
	if rec.DhParamFile != obj.DhParamFile {
		diff["DhParamFile"] = []interface{}{rec.DhParamFile, obj.DhParamFile}
	}
	if rec.IssuersChainPath != obj.IssuersChainPath {
		diff["IssuersChainPath"] = []interface{}{rec.IssuersChainPath, obj.IssuersChainPath}
	}
	if rec.LoadExtraFiles != obj.LoadExtraFiles {
		diff["LoadExtraFiles"] = []interface{}{rec.LoadExtraFiles, obj.LoadExtraFiles}
	}
	if rec.Maxsslconn != obj.Maxsslconn {
		diff["Maxsslconn"] = []interface{}{rec.Maxsslconn, obj.Maxsslconn}
	}
	if rec.Maxsslrate != obj.Maxsslrate {
		diff["Maxsslrate"] = []interface{}{rec.Maxsslrate, obj.Maxsslrate}
	}
	if rec.ModeAsync != obj.ModeAsync {
		diff["ModeAsync"] = []interface{}{rec.ModeAsync, obj.ModeAsync}
	}
	if rec.Propquery != obj.Propquery {
		diff["Propquery"] = []interface{}{rec.Propquery, obj.Propquery}
	}
	if rec.Provider != obj.Provider {
		diff["Provider"] = []interface{}{rec.Provider, obj.Provider}
	}
	if rec.ProviderPath != obj.ProviderPath {
		diff["ProviderPath"] = []interface{}{rec.ProviderPath, obj.ProviderPath}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.SecurityLevel, obj.SecurityLevel) {
		diff["SecurityLevel."+diffKey] = diffValue
	}
	if rec.ServerVerify != obj.ServerVerify {
		diff["ServerVerify"] = []interface{}{rec.ServerVerify, obj.ServerVerify}
	}
	if rec.SkipSelfIssuedCa != obj.SkipSelfIssuedCa {
		diff["SkipSelfIssuedCa"] = []interface{}{rec.SkipSelfIssuedCa, obj.SkipSelfIssuedCa}
	}
	return diff
}

func DiffSlicePointerSslEngine(x, y []*SslEngine) map[string][]interface{} {
	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}

	if x == nil {
		return map[string][]interface{}{"": {nil, y}}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		for diffKey, diffValue := range DiffPointerSslEngine(vx, vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}

func DiffPointerSslEngine(x, y *SslEngine) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if x == nil && y == nil {
		return diff
	}

	key := "*SslEngine"

	switch {
	case x == nil:
		diff[key] = []interface{}{x, *y}
		return diff
	case y == nil:
		diff[key] = []interface{}{*x, y}
		return diff
	}

	for diffKey, diffValue := range (*x).Diff(*y) {
		diff[key+"."+diffKey] = diffValue
	}

	return diff
}
