// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"github.com/haproxytech/go-method-gen/pkg/eqdiff"
)

func (rec HTTPCheck) Equal(obj HTTPCheck, opts ...eqdiff.GoMethodGenOptions) bool {
	return EqualSlicePointerReturnHeader(rec.CheckHeaders, obj.CheckHeaders, opts...) &&
		rec.Addr == obj.Addr &&
		rec.Alpn == obj.Alpn &&
		rec.Body == obj.Body &&
		rec.BodyLogFormat == obj.BodyLogFormat &&
		rec.CheckComment == obj.CheckComment &&
		rec.Default == obj.Default &&
		rec.ErrorStatus == obj.ErrorStatus &&
		rec.ExclamationMark == obj.ExclamationMark &&
		rec.Linger == obj.Linger &&
		rec.Match == obj.Match &&
		EqualMapStringInterface(rec.Metadata, obj.Metadata, opts...) &&
		rec.Method == obj.Method &&
		EqualPointerInt64(rec.MinRecv, obj.MinRecv, opts...) &&
		rec.OkStatus == obj.OkStatus &&
		rec.OnError == obj.OnError &&
		rec.OnSuccess == obj.OnSuccess &&
		rec.Pattern == obj.Pattern &&
		EqualPointerInt64(rec.Port, obj.Port, opts...) &&
		rec.PortString == obj.PortString &&
		rec.Proto == obj.Proto &&
		rec.SendProxy == obj.SendProxy &&
		rec.Sni == obj.Sni &&
		rec.Ssl == obj.Ssl &&
		rec.StatusCode == obj.StatusCode &&
		rec.ToutStatus == obj.ToutStatus &&
		rec.Type == obj.Type &&
		rec.URI == obj.URI &&
		rec.URILogFormat == obj.URILogFormat &&
		rec.VarExpr == obj.VarExpr &&
		rec.VarFormat == obj.VarFormat &&
		rec.VarName == obj.VarName &&
		rec.VarScope == obj.VarScope &&
		rec.Version == obj.Version &&
		rec.ViaSocks4 == obj.ViaSocks4
}

func EqualPointerReturnHeader(x, y *ReturnHeader, opts ...eqdiff.GoMethodGenOptions) bool {
	if x == nil || y == nil {
		return x == y
	}
	return (*x).Equal(*y, opts...)
}

func EqualSlicePointerReturnHeader(x, y []*ReturnHeader, opts ...eqdiff.GoMethodGenOptions) bool {
	var opt *eqdiff.GoMethodGenOptions
	if len(opts) > 0 {
		opt = &opts[0]
	}

	if (x == nil) != (y == nil) {
		if opt == nil || (opt != nil && !opt.TreatNilNotAsEmpty) {
			if len(x) == 0 && len(y) == 0 {
				return true
			}
		}
		return false
	}

	if len(x) != len(y) {
		return false
	}

	for i, vx := range x {
		vy := y[i]
		if !EqualPointerReturnHeader(vx, vy, opts...) {
			return false
		}
	}

	return true
}
