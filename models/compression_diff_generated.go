// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"fmt"
)

func (rec Compression) Diff(obj Compression) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if rec.AlgoReq != obj.AlgoReq {
		diff["AlgoReq"] = []interface{}{rec.AlgoReq, obj.AlgoReq}
	}
	for diffKey, diffValue := range DiffSliceString(rec.Algorithms, obj.Algorithms) {
		diff["Algorithms"+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffSliceString(rec.AlgosRes, obj.AlgosRes) {
		diff["AlgosRes"+diffKey] = diffValue
	}
	if rec.Direction != obj.Direction {
		diff["Direction"] = []interface{}{rec.Direction, obj.Direction}
	}
	if rec.MinsizeReq != obj.MinsizeReq {
		diff["MinsizeReq"] = []interface{}{rec.MinsizeReq, obj.MinsizeReq}
	}
	if rec.MinsizeRes != obj.MinsizeRes {
		diff["MinsizeRes"] = []interface{}{rec.MinsizeRes, obj.MinsizeRes}
	}
	if rec.Offload != obj.Offload {
		diff["Offload"] = []interface{}{rec.Offload, obj.Offload}
	}
	for diffKey, diffValue := range DiffSliceString(rec.Types, obj.Types) {
		diff["Types"+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffSliceString(rec.TypesReq, obj.TypesReq) {
		diff["TypesReq"+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffSliceString(rec.TypesRes, obj.TypesRes) {
		diff["TypesRes"+diffKey] = diffValue
	}
	return diff
}

func DiffSliceString(x, y []string) map[string][]interface{} {
	diff := make(map[string][]interface{})
	lenX := len(x)
	lenY := len(y)

	if (x == nil && y == nil) || (lenX == 0 && lenY == 0) {
		return diff
	}

	if x == nil {
		return map[string][]interface{}{"": {nil, y}}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for i := 0; i < lenX && i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		vx, vy := x[i], y[i]

		if vx != vy {
			diff[key] = []interface{}{vx, vy}
		}

	}

	for i := lenY; i < lenX; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{x[i], nil}
	}

	for i := lenX; i < lenY; i++ {
		key := fmt.Sprintf("[%d]", i)
		diff[key] = []interface{}{nil, y[i]}
	}

	return diff
}
