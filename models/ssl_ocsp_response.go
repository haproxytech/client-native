// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SslOcspResponse SSL OCSP Response
//
// # SSL OCSP Response
//
// swagger:model ssl_ocsp_response
type SslOcspResponse struct {

	// base64 response
	Base64Response string `json:"base64_response,omitempty"`

	// ocsp response status
	OcspResponseStatus string `json:"ocsp_response_status,omitempty"`

	// produced at
	// Format: date
	// +kubebuilder:validation:Format=date
	ProducedAt strfmt.Date `json:"produced_at,omitempty"`

	// responder id
	ResponderID []string `json:"responder_id,omitempty"`

	// response type
	ResponseType string `json:"response_type,omitempty"`

	// responses
	Responses *OCSPResponses `json:"responses,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this ssl ocsp response
func (m *SslOcspResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProducedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SslOcspResponse) validateProducedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ProducedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("produced_at", "body", "date", m.ProducedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SslOcspResponse) validateResponses(formats strfmt.Registry) error {
	if swag.IsZero(m.Responses) { // not required
		return nil
	}

	if m.Responses != nil {
		if err := m.Responses.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("responses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("responses")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ssl ocsp response based on the context it is used
func (m *SslOcspResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResponses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SslOcspResponse) contextValidateResponses(ctx context.Context, formats strfmt.Registry) error {

	if m.Responses != nil {
		if err := m.Responses.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("responses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("responses")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SslOcspResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SslOcspResponse) UnmarshalBinary(b []byte) error {
	var res SslOcspResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OCSPResponses o c s p responses
//
// swagger:model OCSPResponses
type OCSPResponses struct {

	// cert status
	CertStatus string `json:"cert_status,omitempty"`

	// certificate id
	CertificateID *CertificateID `json:"certificate_id,omitempty"`

	// next update
	// Format: date
	// +kubebuilder:validation:Format=date
	NextUpdate strfmt.Date `json:"next_update,omitempty"`

	// revocation reason
	RevocationReason string `json:"revocation_reason,omitempty"`

	// this update
	// Format: date
	// +kubebuilder:validation:Format=date
	ThisUpdate strfmt.Date `json:"this_update,omitempty"`
}

// Validate validates this o c s p responses
func (m *OCSPResponses) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThisUpdate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OCSPResponses) validateCertificateID(formats strfmt.Registry) error {
	if swag.IsZero(m.CertificateID) { // not required
		return nil
	}

	if m.CertificateID != nil {
		if err := m.CertificateID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("responses" + "." + "certificate_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("responses" + "." + "certificate_id")
			}
			return err
		}
	}

	return nil
}

func (m *OCSPResponses) validateNextUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.NextUpdate) { // not required
		return nil
	}

	if err := validate.FormatOf("responses"+"."+"next_update", "body", "date", m.NextUpdate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OCSPResponses) validateThisUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.ThisUpdate) { // not required
		return nil
	}

	if err := validate.FormatOf("responses"+"."+"this_update", "body", "date", m.ThisUpdate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o c s p responses based on the context it is used
func (m *OCSPResponses) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCertificateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OCSPResponses) contextValidateCertificateID(ctx context.Context, formats strfmt.Registry) error {

	if m.CertificateID != nil {
		if err := m.CertificateID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("responses" + "." + "certificate_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("responses" + "." + "certificate_id")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OCSPResponses) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OCSPResponses) UnmarshalBinary(b []byte) error {
	var res OCSPResponses
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
