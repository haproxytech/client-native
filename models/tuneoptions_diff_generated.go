// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"github.com/haproxytech/go-method-gen/pkg/eqdiff"
)

func (rec TuneOptions) Diff(obj TuneOptions, opts ...eqdiff.GoMethodGenOptions) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if rec.AppletZeroCopyForwarding != obj.AppletZeroCopyForwarding {
		diff["AppletZeroCopyForwarding"] = []interface{}{rec.AppletZeroCopyForwarding, obj.AppletZeroCopyForwarding}
	}
	if rec.CompMaxlevel != obj.CompMaxlevel {
		diff["CompMaxlevel"] = []interface{}{rec.CompMaxlevel, obj.CompMaxlevel}
	}
	if rec.DisableFastForward != obj.DisableFastForward {
		diff["DisableFastForward"] = []interface{}{rec.DisableFastForward, obj.DisableFastForward}
	}
	if rec.DisableZeroCopyForwarding != obj.DisableZeroCopyForwarding {
		diff["DisableZeroCopyForwarding"] = []interface{}{rec.DisableZeroCopyForwarding, obj.DisableZeroCopyForwarding}
	}
	for diffKey, diffValue := range DiffSliceString(rec.EpollMaskEvents, obj.EpollMaskEvents, opts...) {
		diff["EpollMaskEvents"+diffKey] = diffValue
	}
	if rec.EventsMaxEventsAtOnce != obj.EventsMaxEventsAtOnce {
		diff["EventsMaxEventsAtOnce"] = []interface{}{rec.EventsMaxEventsAtOnce, obj.EventsMaxEventsAtOnce}
	}
	if rec.FailAlloc != obj.FailAlloc {
		diff["FailAlloc"] = []interface{}{rec.FailAlloc, obj.FailAlloc}
	}
	if rec.FdEdgeTriggered != obj.FdEdgeTriggered {
		diff["FdEdgeTriggered"] = []interface{}{rec.FdEdgeTriggered, obj.FdEdgeTriggered}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.GlitchesKillCPUUsage, obj.GlitchesKillCPUUsage, opts...) {
		diff["GlitchesKillCPUUsage."+diffKey] = diffValue
	}
	if rec.H1ZeroCopyFwdRecv != obj.H1ZeroCopyFwdRecv {
		diff["H1ZeroCopyFwdRecv"] = []interface{}{rec.H1ZeroCopyFwdRecv, obj.H1ZeroCopyFwdRecv}
	}
	if rec.H1ZeroCopyFwdSend != obj.H1ZeroCopyFwdSend {
		diff["H1ZeroCopyFwdSend"] = []interface{}{rec.H1ZeroCopyFwdSend, obj.H1ZeroCopyFwdSend}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.H2BeGlitchesThreshold, obj.H2BeGlitchesThreshold, opts...) {
		diff["H2BeGlitchesThreshold."+diffKey] = diffValue
	}
	if rec.H2BeInitialWindowSize != obj.H2BeInitialWindowSize {
		diff["H2BeInitialWindowSize"] = []interface{}{rec.H2BeInitialWindowSize, obj.H2BeInitialWindowSize}
	}
	if rec.H2BeMaxConcurrentStreams != obj.H2BeMaxConcurrentStreams {
		diff["H2BeMaxConcurrentStreams"] = []interface{}{rec.H2BeMaxConcurrentStreams, obj.H2BeMaxConcurrentStreams}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.H2BeRxbuf, obj.H2BeRxbuf, opts...) {
		diff["H2BeRxbuf."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.H2FeGlitchesThreshold, obj.H2FeGlitchesThreshold, opts...) {
		diff["H2FeGlitchesThreshold."+diffKey] = diffValue
	}
	if rec.H2FeInitialWindowSize != obj.H2FeInitialWindowSize {
		diff["H2FeInitialWindowSize"] = []interface{}{rec.H2FeInitialWindowSize, obj.H2FeInitialWindowSize}
	}
	if rec.H2FeMaxConcurrentStreams != obj.H2FeMaxConcurrentStreams {
		diff["H2FeMaxConcurrentStreams"] = []interface{}{rec.H2FeMaxConcurrentStreams, obj.H2FeMaxConcurrentStreams}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.H2FeMaxTotalStreams, obj.H2FeMaxTotalStreams, opts...) {
		diff["H2FeMaxTotalStreams."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.H2FeRxbuf, obj.H2FeRxbuf, opts...) {
		diff["H2FeRxbuf."+diffKey] = diffValue
	}
	if rec.H2HeaderTableSize != obj.H2HeaderTableSize {
		diff["H2HeaderTableSize"] = []interface{}{rec.H2HeaderTableSize, obj.H2HeaderTableSize}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.H2InitialWindowSize, obj.H2InitialWindowSize, opts...) {
		diff["H2InitialWindowSize."+diffKey] = diffValue
	}
	if rec.H2MaxConcurrentStreams != obj.H2MaxConcurrentStreams {
		diff["H2MaxConcurrentStreams"] = []interface{}{rec.H2MaxConcurrentStreams, obj.H2MaxConcurrentStreams}
	}
	if rec.H2MaxFrameSize != obj.H2MaxFrameSize {
		diff["H2MaxFrameSize"] = []interface{}{rec.H2MaxFrameSize, obj.H2MaxFrameSize}
	}
	if rec.H2ZeroCopyFwdSend != obj.H2ZeroCopyFwdSend {
		diff["H2ZeroCopyFwdSend"] = []interface{}{rec.H2ZeroCopyFwdSend, obj.H2ZeroCopyFwdSend}
	}
	if rec.HTTPCookielen != obj.HTTPCookielen {
		diff["HTTPCookielen"] = []interface{}{rec.HTTPCookielen, obj.HTTPCookielen}
	}
	if rec.HTTPLogurilen != obj.HTTPLogurilen {
		diff["HTTPLogurilen"] = []interface{}{rec.HTTPLogurilen, obj.HTTPLogurilen}
	}
	if rec.HTTPMaxhdr != obj.HTTPMaxhdr {
		diff["HTTPMaxhdr"] = []interface{}{rec.HTTPMaxhdr, obj.HTTPMaxhdr}
	}
	if rec.IdlePoolShared != obj.IdlePoolShared {
		diff["IdlePoolShared"] = []interface{}{rec.IdlePoolShared, obj.IdlePoolShared}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.Idletimer, obj.Idletimer, opts...) {
		diff["Idletimer."+diffKey] = diffValue
	}
	if rec.ListenerDefaultShards != obj.ListenerDefaultShards {
		diff["ListenerDefaultShards"] = []interface{}{rec.ListenerDefaultShards, obj.ListenerDefaultShards}
	}
	if rec.ListenerMultiQueue != obj.ListenerMultiQueue {
		diff["ListenerMultiQueue"] = []interface{}{rec.ListenerMultiQueue, obj.ListenerMultiQueue}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.MaxChecksPerThread, obj.MaxChecksPerThread, opts...) {
		diff["MaxChecksPerThread."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.MaxRulesAtOnce, obj.MaxRulesAtOnce, opts...) {
		diff["MaxRulesAtOnce."+diffKey] = diffValue
	}
	if rec.Maxaccept != obj.Maxaccept {
		diff["Maxaccept"] = []interface{}{rec.Maxaccept, obj.Maxaccept}
	}
	if rec.Maxpollevents != obj.Maxpollevents {
		diff["Maxpollevents"] = []interface{}{rec.Maxpollevents, obj.Maxpollevents}
	}
	if rec.Maxrewrite != obj.Maxrewrite {
		diff["Maxrewrite"] = []interface{}{rec.Maxrewrite, obj.Maxrewrite}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.MemoryHotSize, obj.MemoryHotSize, opts...) {
		diff["MemoryHotSize."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.NotsentLowatClient, obj.NotsentLowatClient, opts...) {
		diff["NotsentLowatClient."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.NotsentLowatServer, obj.NotsentLowatServer, opts...) {
		diff["NotsentLowatServer."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.PatternCacheSize, obj.PatternCacheSize, opts...) {
		diff["PatternCacheSize."+diffKey] = diffValue
	}
	if rec.PeersMaxUpdatesAtOnce != obj.PeersMaxUpdatesAtOnce {
		diff["PeersMaxUpdatesAtOnce"] = []interface{}{rec.PeersMaxUpdatesAtOnce, obj.PeersMaxUpdatesAtOnce}
	}
	if rec.PoolHighFdRatio != obj.PoolHighFdRatio {
		diff["PoolHighFdRatio"] = []interface{}{rec.PoolHighFdRatio, obj.PoolHighFdRatio}
	}
	if rec.PoolLowFdRatio != obj.PoolLowFdRatio {
		diff["PoolLowFdRatio"] = []interface{}{rec.PoolLowFdRatio, obj.PoolLowFdRatio}
	}
	if rec.PtZeroCopyForwarding != obj.PtZeroCopyForwarding {
		diff["PtZeroCopyForwarding"] = []interface{}{rec.PtZeroCopyForwarding, obj.PtZeroCopyForwarding}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ReniceRuntime, obj.ReniceRuntime, opts...) {
		diff["ReniceRuntime."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.ReniceStartup, obj.ReniceStartup, opts...) {
		diff["ReniceStartup."+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.RingQueues, obj.RingQueues, opts...) {
		diff["RingQueues."+diffKey] = diffValue
	}
	if rec.RunqueueDepth != obj.RunqueueDepth {
		diff["RunqueueDepth"] = []interface{}{rec.RunqueueDepth, obj.RunqueueDepth}
	}
	if rec.SchedLowLatency != obj.SchedLowLatency {
		diff["SchedLowLatency"] = []interface{}{rec.SchedLowLatency, obj.SchedLowLatency}
	}
	for diffKey, diffValue := range DiffPointerInt64(rec.StickCounters, obj.StickCounters, opts...) {
		diff["StickCounters."+diffKey] = diffValue
	}
	if rec.TakeoverOtherTgConnections != obj.TakeoverOtherTgConnections {
		diff["TakeoverOtherTgConnections"] = []interface{}{rec.TakeoverOtherTgConnections, obj.TakeoverOtherTgConnections}
	}
	return diff
}
