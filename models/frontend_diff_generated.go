// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

import (
	"fmt"
)

func (rec Frontend) Diff(obj Frontend) map[string][]interface{} {
	diff := make(map[string][]interface{})
	for diffKey, diffValue := range rec.FrontendBase.Diff(obj.FrontendBase) {
		diff["FrontendBase."+diffKey] = diffValue
	}
	for diffKey, diffValue := range rec.ACLList.Diff(obj.ACLList) {
		diff["ACLList"+diffKey] = diffValue
	}
	for diffKey, diffValue := range rec.BackendSwitchingRuleList.Diff(obj.BackendSwitchingRuleList) {
		diff["BackendSwitchingRuleList"+diffKey] = diffValue
	}
	for diffKey, diffValue := range rec.CaptureList.Diff(obj.CaptureList) {
		diff["CaptureList"+diffKey] = diffValue
	}
	for diffKey, diffValue := range rec.FilterList.Diff(obj.FilterList) {
		diff["FilterList"+diffKey] = diffValue
	}
	for diffKey, diffValue := range rec.HTTPAfterResponseRuleList.Diff(obj.HTTPAfterResponseRuleList) {
		diff["HTTPAfterResponseRuleList"+diffKey] = diffValue
	}
	for diffKey, diffValue := range rec.HTTPErrorRuleList.Diff(obj.HTTPErrorRuleList) {
		diff["HTTPErrorRuleList"+diffKey] = diffValue
	}
	for diffKey, diffValue := range rec.HTTPRequestRuleList.Diff(obj.HTTPRequestRuleList) {
		diff["HTTPRequestRuleList"+diffKey] = diffValue
	}
	for diffKey, diffValue := range rec.HTTPResponseRuleList.Diff(obj.HTTPResponseRuleList) {
		diff["HTTPResponseRuleList"+diffKey] = diffValue
	}
	for diffKey, diffValue := range rec.LogTargetList.Diff(obj.LogTargetList) {
		diff["LogTargetList"+diffKey] = diffValue
	}
	for diffKey, diffValue := range rec.QUICInitialRuleList.Diff(obj.QUICInitialRuleList) {
		diff["QUICInitialRuleList"+diffKey] = diffValue
	}
	for diffKey, diffValue := range rec.SSLFrontUses.Diff(obj.SSLFrontUses) {
		diff["SSLFrontUses"+diffKey] = diffValue
	}
	for diffKey, diffValue := range rec.TCPRequestRuleList.Diff(obj.TCPRequestRuleList) {
		diff["TCPRequestRuleList"+diffKey] = diffValue
	}
	for diffKey, diffValue := range DiffMapStringBind(rec.Binds, obj.Binds) {
		diff["Binds"+diffKey] = diffValue
	}
	return diff
}

func DiffMapStringBind(x, y map[string]Bind) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if (x == nil && y == nil) || (len(x) == 0 && len(y) == 0) {
		return diff
	}

	if x == nil {
		return map[string][]interface{}{"": {nil, y}}
	}

	if y == nil {
		return map[string][]interface{}{"": {x, nil}}
	}

	for kx, vx := range x {
		key := fmt.Sprintf("[%v]", kx)
		vy := y[kx]

		for diffKey, diffValue := range vx.Diff(vy) {
			diff[key+"."+diffKey] = diffValue
		}

	}
	for ky, vy := range y {
		key := fmt.Sprintf("[%v]", ky)
		if _, found := diff[key]; found {
			continue
		}

		vx := x[ky]

		for diffKey, diffValue := range vx.Diff(vy) {
			diff[key+"."+diffKey] = []interface{}{diffValue[1], diffValue[0]}
		}

	}
	return diff
}
