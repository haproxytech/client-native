// Code generated by go-method-gen. DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

func (rec SpoeAgent) Diff(obj SpoeAgent) map[string][]interface{} {
	diff := make(map[string][]interface{})
	if rec.Async != obj.Async {
		diff["Async"] = []interface{}{rec.Async, obj.Async}
	}
	if rec.ContinueOnError != obj.ContinueOnError {
		diff["ContinueOnError"] = []interface{}{rec.ContinueOnError, obj.ContinueOnError}
	}
	if rec.DontlogNormal != obj.DontlogNormal {
		diff["DontlogNormal"] = []interface{}{rec.DontlogNormal, obj.DontlogNormal}
	}
	if rec.EngineName != obj.EngineName {
		diff["EngineName"] = []interface{}{rec.EngineName, obj.EngineName}
	}
	if rec.ForceSetVar != obj.ForceSetVar {
		diff["ForceSetVar"] = []interface{}{rec.ForceSetVar, obj.ForceSetVar}
	}
	if rec.Groups != obj.Groups {
		diff["Groups"] = []interface{}{rec.Groups, obj.Groups}
	}
	if rec.HelloTimeout != obj.HelloTimeout {
		diff["HelloTimeout"] = []interface{}{rec.HelloTimeout, obj.HelloTimeout}
	}
	if rec.IdleTimeout != obj.IdleTimeout {
		diff["IdleTimeout"] = []interface{}{rec.IdleTimeout, obj.IdleTimeout}
	}
	for diffKey, diffValue := range rec.Log.Diff(obj.Log) {
		diff["Log"+diffKey] = diffValue
	}
	if rec.MaxFrameSize != obj.MaxFrameSize {
		diff["MaxFrameSize"] = []interface{}{rec.MaxFrameSize, obj.MaxFrameSize}
	}
	if rec.MaxWaitingFrames != obj.MaxWaitingFrames {
		diff["MaxWaitingFrames"] = []interface{}{rec.MaxWaitingFrames, obj.MaxWaitingFrames}
	}
	if rec.Maxconnrate != obj.Maxconnrate {
		diff["Maxconnrate"] = []interface{}{rec.Maxconnrate, obj.Maxconnrate}
	}
	if rec.Maxerrrate != obj.Maxerrrate {
		diff["Maxerrrate"] = []interface{}{rec.Maxerrrate, obj.Maxerrrate}
	}
	if rec.Messages != obj.Messages {
		diff["Messages"] = []interface{}{rec.Messages, obj.Messages}
	}
	for diffKey, diffValue := range DiffPointerString(rec.Name, obj.Name) {
		diff["Name."+diffKey] = diffValue
	}
	if rec.OptionSetOnError != obj.OptionSetOnError {
		diff["OptionSetOnError"] = []interface{}{rec.OptionSetOnError, obj.OptionSetOnError}
	}
	if rec.OptionSetProcessTime != obj.OptionSetProcessTime {
		diff["OptionSetProcessTime"] = []interface{}{rec.OptionSetProcessTime, obj.OptionSetProcessTime}
	}
	if rec.OptionSetTotalTime != obj.OptionSetTotalTime {
		diff["OptionSetTotalTime"] = []interface{}{rec.OptionSetTotalTime, obj.OptionSetTotalTime}
	}
	if rec.OptionVarPrefix != obj.OptionVarPrefix {
		diff["OptionVarPrefix"] = []interface{}{rec.OptionVarPrefix, obj.OptionVarPrefix}
	}
	if rec.Pipelining != obj.Pipelining {
		diff["Pipelining"] = []interface{}{rec.Pipelining, obj.Pipelining}
	}
	if rec.ProcessingTimeout != obj.ProcessingTimeout {
		diff["ProcessingTimeout"] = []interface{}{rec.ProcessingTimeout, obj.ProcessingTimeout}
	}
	if rec.RegisterVarNames != obj.RegisterVarNames {
		diff["RegisterVarNames"] = []interface{}{rec.RegisterVarNames, obj.RegisterVarNames}
	}
	if rec.SendFragPayload != obj.SendFragPayload {
		diff["SendFragPayload"] = []interface{}{rec.SendFragPayload, obj.SendFragPayload}
	}
	if rec.UseBackend != obj.UseBackend {
		diff["UseBackend"] = []interface{}{rec.UseBackend, obj.UseBackend}
	}
	return diff
}
