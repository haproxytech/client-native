// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Nomad Nomad server
//
// Nomad server configuration
// Example: {"address":"127.0.0.1","enabled":true,"id":"0","port":4646,"retry_timeout":"10a","service_allowlist":[],"service_denylist":[]}
//
// swagger:model nomad
type Nomad struct {

	// address
	// Required: true
	// Pattern: ^[^\s]+$
	Address *string `json:"address"`

	// allowlist
	Allowlist []string `json:"allowlist"`

	// denylist
	Denylist []string `json:"denylist"`

	// description
	Description string `json:"description,omitempty"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// Auto generated ID.
	// Pattern: ^[^\s]+$
	ID *string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// port
	// Required: true
	// Maximum: 65535
	// Minimum: 1
	Port *int64 `json:"port"`

	// Duration in seconds in-between data pulling requests to the nomad server
	// Required: true
	// Minimum: 1
	RetryTimeout *int64 `json:"retry_timeout"`

	// secret id
	// Pattern: ^[^\s]+$
	SecretID string `json:"secret_id,omitempty"`

	// server slots base
	ServerSlotsBase *int64 `json:"server_slots_base,omitempty"`

	// server slots growth increment
	ServerSlotsGrowthIncrement int64 `json:"server_slots_growth_increment,omitempty"`

	// server slots growth type
	// Enum: [linear exponential]
	ServerSlotsGrowthType *string `json:"server_slots_growth_type,omitempty"`
}

// Validate validates this nomad
func (m *Nomad) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllowlist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDenylist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetryTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerSlotsGrowthType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Nomad) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	if err := validate.Pattern("address", "body", *m.Address, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *Nomad) validateAllowlist(formats strfmt.Registry) error {
	if swag.IsZero(m.Allowlist) { // not required
		return nil
	}

	for i := 0; i < len(m.Allowlist); i++ {

		if err := validate.Pattern("allowlist"+"."+strconv.Itoa(i), "body", m.Allowlist[i], `^[^\s]+$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *Nomad) validateDenylist(formats strfmt.Registry) error {
	if swag.IsZero(m.Denylist) { // not required
		return nil
	}

	for i := 0; i < len(m.Denylist); i++ {

		if err := validate.Pattern("denylist"+"."+strconv.Itoa(i), "body", m.Denylist[i], `^[^\s]+$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *Nomad) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *Nomad) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", *m.ID, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *Nomad) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	if err := validate.MinimumInt("port", "body", *m.Port, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", *m.Port, 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *Nomad) validateRetryTimeout(formats strfmt.Registry) error {

	if err := validate.Required("retry_timeout", "body", m.RetryTimeout); err != nil {
		return err
	}

	if err := validate.MinimumInt("retry_timeout", "body", *m.RetryTimeout, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Nomad) validateSecretID(formats strfmt.Registry) error {
	if swag.IsZero(m.SecretID) { // not required
		return nil
	}

	if err := validate.Pattern("secret_id", "body", m.SecretID, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

var nomadTypeServerSlotsGrowthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["linear","exponential"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nomadTypeServerSlotsGrowthTypePropEnum = append(nomadTypeServerSlotsGrowthTypePropEnum, v)
	}
}

const (

	// NomadServerSlotsGrowthTypeLinear captures enum value "linear"
	NomadServerSlotsGrowthTypeLinear string = "linear"

	// NomadServerSlotsGrowthTypeExponential captures enum value "exponential"
	NomadServerSlotsGrowthTypeExponential string = "exponential"
)

// prop value enum
func (m *Nomad) validateServerSlotsGrowthTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nomadTypeServerSlotsGrowthTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Nomad) validateServerSlotsGrowthType(formats strfmt.Registry) error {
	if swag.IsZero(m.ServerSlotsGrowthType) { // not required
		return nil
	}

	// value enum
	if err := m.validateServerSlotsGrowthTypeEnum("server_slots_growth_type", "body", *m.ServerSlotsGrowthType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nomad based on context it is used
func (m *Nomad) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Nomad) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Nomad) UnmarshalBinary(b []byte) error {
	var res Nomad
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
