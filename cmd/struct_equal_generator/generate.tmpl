{{- range .Functions}}
{{- $topLevel := . }}
// {{.Name}} checks if two structs of type {{.Data.Name}} are equal
//
{{- if or .Data.NeedsOptions .Data.NeedsOptionsIndex }}
// By default empty maps and slices are equal to nil:
{{- end}}
//  var a, b {{.Data.Name}}
//  {{.Name | LowerCase}} := a.{{.Name}}(b)
{{- if or .Data.NeedsOptions .Data.NeedsOptionsIndex }}
// For more advanced use case you can configure these options (default values are shown):
//  var a, b {{.Data.Name}}
//  {{.Name | LowerCase}} := a.{{.Name}}(b,Options{
{{- if .Data.NeedsOptions }}
//  	NilSameAsEmpty: true,
{{end -}}
{{- if .Data.NeedsOptionsIndex }}
//  	SkipIndex: true,
{{end -}}
//  })
{{else}}
// opts ...Options are ignored in this method
{{end -}}
func (s {{.Data.Name}}) {{.Name}}(t {{.Data.Name}}, opts ...Options) {{- if eq $topLevel.Name "Equal" }}bool{{- else if eq $topLevel.Name "Diff" }}map[string][]interface{} {{- else }} ERR {{end}} {
{{- if or .Data.NeedsOptions .Data.NeedsOptionsIndex }}
	opt := getOptions(opts...)
{{ end }}
{{- if eq $topLevel.Name "Diff" }}
    diff := make(map[string][]interface{})
{{- end }}
{{- if eq .Data.Mode "struct" }}
	{{- range .Data.Fields}}
	{{- if and (HasPrefix .Name "Index") (HasPrefix .Type "*int64") }}
		if !opt.SkipIndex && !equalPointers(s.{{.Name}}, t.{{.Name}}){
			{{- if eq $topLevel.Name "Equal" }}
				return false
			{{- else if eq $topLevel.Name "Diff" }}
				diff["{{.Name}}"] = []interface{}{ValueOrNil(s.{{.Name}}), ValueOrNil(t.{{.Name}})}
			{{- end }}
		}
	{{- else if or .HasEqual .HasEqualOpt }}
	    {{if HasPrefix .Type "*"}}
		if s.{{.Name}} == nil || t.{{.Name}} == nil {
			if s.{{.Name}} != nil || t.{{.Name}} != nil {
				if opt.NilSameAsEmpty {
					{{- if eq .TypeInFile "" }}
					empty := &{{ TrimPrefix .Type "*"}}{}
					{{- else }}
					empty := &{{ TrimPrefix .TypeInFile "*"}}{}
					{{- end }}
					if s.{{.Name}} == nil {
						if !(t.{{.Name}}.Equal(*empty)){
							{{- if eq $topLevel.Name "Equal" }}
								return false
							{{- else if eq $topLevel.Name "Diff" }}
								diff["{{.Name}}"] = []interface{}{ {{if HasPrefix .Type "*"}}ValueOrNil({{end}}s.{{.Name}}{{if HasPrefix .Type "*"}}){{end}}, {{if HasPrefix .Type "*"}}ValueOrNil({{end}}t.{{.Name}}{{if HasPrefix .Type "*"}}){{end}} }
							{{- end }}
						}
					}
					if t.{{.Name}} == nil {
						if !(s.{{.Name}}.Equal(*empty)){
							{{- if eq $topLevel.Name "Equal" }}
								return false
							{{- else if eq $topLevel.Name "Diff" }}
								diff["{{.Name}}"] = []interface{}{ {{if HasPrefix .Type "*"}}ValueOrNil({{end}}s.{{.Name}}{{if HasPrefix .Type "*"}}){{end}}, {{if HasPrefix .Type "*"}}ValueOrNil({{end}}t.{{.Name}}{{if HasPrefix .Type "*"}}){{end}} }
							{{- end }}
						}
					}
				} else {
					{{- if eq $topLevel.Name "Equal" }}
						return false
					{{- else if eq $topLevel.Name "Diff" }}
						diff["{{.Name}}"] = []interface{}{ {{if HasPrefix .Type "*"}}ValueOrNil({{end}}s.{{.Name}}{{if HasPrefix .Type "*"}}){{end}}, {{if HasPrefix .Type "*"}}ValueOrNil({{end}}t.{{.Name}}{{if HasPrefix .Type "*"}}){{end}} }
					{{- end }}
				}
			}
		{{- end}}
		{{if HasPrefix .Type "*"}} } else {{end}}if !s.{{.Name}}.Equal({{if HasPrefix .Type "*"}}*{{end}}t.{{.Name}}{{if .HasEqualOpt}}, opt{{end}}) {
			{{- if eq $topLevel.Name "Equal" }}
				return false
			{{- else if eq $topLevel.Name "Diff" }}
				diff["{{.Name}}"] = []interface{}{ {{if HasPrefix .Type "*"}}ValueOrNil({{end}}s.{{.Name}}{{if HasPrefix .Type "*"}}){{end}}, {{if HasPrefix .Type "*"}}ValueOrNil({{end}}t.{{.Name}}{{if HasPrefix .Type "*"}}){{end}} }
			{{- end }}
		}
	{{- else if HasPrefix .Type "map" }}
	    {{- if eq .Type "map[string]map[string]string"}}
			if !equalMapStringMapSting(s.{{.Name}}, t.{{.Name}}, opt) {
				{{- if eq $topLevel.Name "Equal" }}
					return false
				{{- else if eq $topLevel.Name "Diff" }}
					diff["{{.Name}}"] = []interface{}{ s.{{.Name}}, t.{{.Name}}}
				{{- end }}
			}
		{{- else }}
			{{- if not .IsComparable }}
				if !CheckSameNilAndLenMap[{{.MapKeyType}},{{.MapItemType}}](s.{{.Name}}, t.{{.Name}}, opt){
					{{- if eq $topLevel.Name "Equal" }}
						return false
					{{- else if eq $topLevel.Name "Diff" }}
						diff["{{.Name}}"] = []interface{}{ s.{{.Name}}, t.{{.Name}}}
					{{- end }}
				}

				for k,v := range s.{{.Name}} {
				{{- if eq .Name "Metadata" }}
					if !reflect.DeepEqual(t.{{.Name}}[k], v) {
				{{- else }}
					if !t.{{.Name}}[k].Equal(v, opt) {
				{{- end }}
						{{- if eq $topLevel.Name "Equal" }}
							return false
						{{- else if eq $topLevel.Name "Diff" }}
							diff["{{.Name}}"] = []interface{}{ s.{{.Name}}, t.{{.Name}}}
						{{- end }}
					}
				}
			{{- else }}
				if !equalComparableMap(s.{{.Name}}, t.{{.Name}}, opt) {
					{{- if eq $topLevel.Name "Equal" }}
						return false
					{{- else if eq $topLevel.Name "Diff" }}
						diff["{{.Name}}"] = []interface{}{ s.{{.Name}}, t.{{.Name}}}
					{{- end }}
				}
			{{- end }}
		{{- end }}
	{{- else if or .IsBasicType .IsComparable}}
	    {{- if HasPrefix .Type "*" }}
		  if !equalPointers(s.{{.Name}}, t.{{.Name}}) {
		    {{- if eq $topLevel.Name "Equal" }}
				return false
			{{- else if eq $topLevel.Name "Diff" }}
				diff["{{.Name}}"] = []interface{}{ ValueOrNil(s.{{.Name}}), ValueOrNil(t.{{.Name}})}
			{{- end }}
		  }
		{{- else }}
			if s.{{.Name}} != t.{{.Name}} {
				{{- if eq $topLevel.Name "Equal" }}
					return false
				{{- else if eq $topLevel.Name "Diff" }}
					diff["{{.Name}}"] = []interface{}{s.{{.Name}}, t.{{.Name}}}
				{{- end }}
			}
		{{- end }}
	{{- else if .IsArray }}
	    {{- if or .IsComparable .SubType.IsComparable }}
			if !equalComparableSlice(s.{{.Name}}, t.{{.Name}}, opt) {
				{{- if eq $topLevel.Name "Equal" }}
					return false
				{{- else if eq $topLevel.Name "Diff" }}
					diff["{{.Name}}"] = []interface{}{ s.{{.Name}}, t.{{.Name}}}
				{{- end }}
			}
		{{- else }}
			if !CheckSameNilAndLen(s.{{.Name}}, t.{{.Name}}, opt){
				{{- if eq $topLevel.Name "Equal" }}
					return false
				{{- else if eq $topLevel.Name "Diff" }}
					diff["{{.Name}}"] = []interface{}{ s.{{.Name}}, t.{{.Name}}}
				{{- end }}
			} else {
				{{- if eq $topLevel.Name "Diff" }}
						diff2 := make(map[string][]interface{})
				{{- end }}
				for i := range s.{{.Name}} {
					{{- if .SubType.HasEqual}}
						if !s.{{.Name}}[i].Equal({{if HasPrefix .Type "[]*"}}*{{end}}t.{{.Name}}[i]) {
							{{- if eq $topLevel.Name "Equal" }}
								return false
							{{- else if eq $topLevel.Name "Diff" }}
								diff["{{.Name}}"] = []interface{}{ s.{{.Name}}, t.{{.Name}}}
							{{- end }}
						}
					{{- else if .SubType.HasEqualOpt}}
						if !s.{{.Name}}[i].Equal({{if HasPrefix .Type "[]*"}}*{{end}}t.{{.Name}}[i], opt) {
							{{- if eq $topLevel.Name "Equal" }}
								return false
							{{- else if eq $topLevel.Name "Diff" }}
								diffSub := s.{{.Name}}[i].Diff({{if HasPrefix .Type "[]*"}}*{{end}}t.{{.Name}}[i], opt)
								if len(diffSub) > 0 {
									diff2[strconv.Itoa(i)] = []interface{}{ diffSub }
								}
							{{- end }}
						}
					{{- else }}
						{{- if HasPrefix .SubType.Type "*" }}
							if !equalPointers(s.{{.Name}}[i], t.{{.Name}}[i]) {
								{{- if eq $topLevel.Name "Equal" }}
									return false
								{{- else if eq $topLevel.Name "Diff" }}
									diff["{{.Name}}"] = []interface{}{ s.{{.Name}}, t.{{.Name}}}
								{{- end }}
							}
						{{- else }}
							if s.{{.Name}}[i] != t.{{.Name}}[i] {
								{{- if eq $topLevel.Name "Equal" }}
									return false
								{{- else if eq $topLevel.Name "Diff" }}
									return false
								{{- end }}
							}
						{{- end }}
					{{- end }}
				}
				{{- if eq $topLevel.Name "Diff" }}
					if len(diff2) > 0 {
						diff["{{.Name}}"] = []interface{}{diff2}
					}
				{{- end }}
			}
		{{- end }}
	{{- else}}
		ERR // {{ . | JSON }}
	{{end}}
	{{end}}
	{{- if eq $topLevel.Name "Equal" }}
		return true
	{{- else if eq $topLevel.Name "Diff" }}
		return diff
	{{- end }}
{{end}}
{{- if eq .Data.Mode "array" }}
	{{- if and .Data.IsComparable .Data.IsBasicType }}
	{{- if eq $topLevel.Name "Equal" }}
		return equalComparableSlice(s, t, opt)
	{{- else if eq $topLevel.Name "Diff" }}
		diff["{{.Name}}"] = []interface{}{s, t}
	{{- end }}
	{{- else }}
	if !opt.NilSameAsEmpty {
		if s == nil && t != nil {
			{{- if eq $topLevel.Name "Equal" }}
				return false
			{{- else if eq $topLevel.Name "Diff" }}
		  		diff["{{.Name}}"] = []interface{}{s, t}
		  		return diff
			{{- end }}
		}
		if t == nil && s != nil {
			{{- if eq $topLevel.Name "Equal" }}
				return false
			{{- else if eq $topLevel.Name "Diff" }}
		  		diff["{{.Name}}"] = []interface{}{s, t}
		  		return diff
			{{- end }}
		}
	}
	if len(s) != len(t) {
		{{- if eq $topLevel.Name "Equal" }}
			return false
		{{- else if eq $topLevel.Name "Diff" }}
			diff["{{.Name}}"] = []interface{}{s, t}
			return diff
		{{- end }}
	}
	for i, v := range s {
		{{- if .Data.IsBasicType}}
			{{- if HasPrefix .Data.Type "*"}}
				if *v != *t[i] {
					{{- if eq $topLevel.Name "Equal" }}
						return false
					{{- else if eq $topLevel.Name "Diff" }}
						diff[fmt.Sprintf("{{.Name}}[%d]", i)] = []interface{}{*v, *t[i]}
					{{- end }}
				}
			{{- else -}}
				if v != t[i] {
					{{- if eq $topLevel.Name "Equal" }}
						return false
					{{- else if eq $topLevel.Name "Diff" }}
						diff[fmt.Sprintf("{{.Name}}[%d]", i)] = []interface{}{v, t[i]}
					{{- end }}
				}
			{{- end}}
		{{- else}}
			if !v.Equal({{if .Data.IsPointer}}*{{end}}t[i], opt) {
				{{- if eq $topLevel.Name "Equal" }}
					return false
				{{- else if eq $topLevel.Name "Diff" }}
					diff[fmt.Sprintf("{{.Name}}[%d]", i)] = []interface{}{v, t[i]}
				{{- end }}
			}
		{{end}}
	}
	{{- if eq $topLevel.Name "Equal" }}
		return true
	{{- else if eq $topLevel.Name "Diff" }}
		return diff
	{{- end }}
	{{- end }}
{{- end -}}
{{- if eq .Data.Mode "map" }}
	{{- if eq $topLevel.Name "Equal" }}
		return equalComparableMap(s, t, opt)
	{{- else if eq $topLevel.Name "Diff" }}
		if !equalComparableMap(s, t, opt) {
			diff["{{.Name}}"] = []interface{}{s, t}
		}
		return diff
	{{- end }}
{{- end -}}
{{- if eq .Data.Mode "ident" }}
	{{- if eq $topLevel.Name "Equal" }}
		return s == t
	{{- else if eq $topLevel.Name "Diff" }}
		if s != t {
			diff["{{.Name}}"] = []interface{}{s, t}
		}
		return diff
	{{- end }}
{{- end -}}
}
{{- end -}}
